<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Binomed Blog</title>
  <subtitle>Encore un blog de G33k</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://jef.binomed.fr/"/>
  <updated>2016-02-26T15:02:46.773Z</updated>
  <id>http://jef.binomed.fr/</id>
  
  <author>
    <name>jefBinomed</name>
    <email>jean.francois.garreau+blog@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Myo sous linux</title>
    <link href="http://jef.binomed.fr/2015/12/11/2015-12-11--myo-sous-linux/"/>
    <id>http://jef.binomed.fr/2015/12/11/2015-12-11--myo-sous-linux/</id>
    <published>2015-12-11T20:59:15.000Z</published>
    <updated>2016-02-26T15:02:46.773Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/2015-12-MyoLinux/myo_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Cette semaine à SQLI, lors d’une soirée Hack, j’ai eu l’occasion de prendre le temps pour faire un truc que j’aurais dû faire depuis bien longtemps à savoir : Faire marcher mon bracelet &lt;a href=&quot;https://www.myo.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Myo&lt;/a&gt; sous Linux ! &lt;/p&gt;
&lt;h1 id=&quot;PyoConnect&quot;&gt;&lt;a href=&quot;#PyoConnect&quot; class=&quot;headerlink&quot; title=&quot;PyoConnect&quot;&gt;&lt;/a&gt;PyoConnect&lt;/h1&gt;&lt;p&gt;Les développeurs de Myo, n’ont pas encore pris le temps de développer le sdk pour Linux ni l’application de gestion MyoConnect. Heureusement la communauté est là ! Un développeur (Fernando Cosentino) a développé une solution basée sur Python nous permettant de contrôler notre Myo en simulant le SDK officiel &lt;a href=&quot;http://www.lua.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LUA&lt;/a&gt; sous Linux !&lt;/p&gt;
&lt;p&gt;Le projet est disponible ici : &lt;a href=&quot;http://www.fernandocosentino.net/pyoconnect/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.fernandocosentino.net/pyoconnect/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Installation&quot;&gt;&lt;a href=&quot;#Installation&quot; class=&quot;headerlink&quot; title=&quot;Installation&quot;&gt;&lt;/a&gt;Installation&lt;/h1&gt;&lt;p&gt;L’installation est très simple à effectuer&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// plug bluetooth adapter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// permission to ttyACM0 - must restart linux user after this&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo usermod &lt;span class=&quot;operator&quot;&gt;-a&lt;/span&gt; -G dialout &lt;span class=&quot;variable&quot;&gt;$USER&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// dependencies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install python-pip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo pip install pySerial --upgrade&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo pip install enum34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo pip install PyUserInput&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install python-Xlib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install python-tk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// now reboot&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Une fois cette installation faite, il vous faut télécharger le zip contenant le script python : &lt;a href=&quot;http://www.fernandocosentino.net/pyoconnect/PyoConnect_v2.0.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PyoConnect V2.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vous pouvez le dezziper où bon vous semble car après ce répertoire sera votre point de départ. Nous allons appeler le chemin vers ce répertoire : &lt;code&gt;$PYO_PATH&lt;/code&gt; pour le reste de l’article&lt;/p&gt;
&lt;h1 id=&quot;Lancement&quot;&gt;&lt;a href=&quot;#Lancement&quot; class=&quot;headerlink&quot; title=&quot;Lancement&quot;&gt;&lt;/a&gt;Lancement&lt;/h1&gt;&lt;p&gt;Il ne nous reste plus qu’à lancer le script afin de voir ce que cela donne :)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Branchez votre dongle bluetooth Myo&lt;/li&gt;
&lt;li&gt;Vérifiez que votre Myo est bien allumé&lt;/li&gt;
&lt;li&gt;Tapez : &lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Aller dans le répertoire de Pyo Connect&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$PYO_PATH&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Lancez le script python&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python PyoManager.pyc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;à partir de là, une fenêtre se lance : &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2015-12-MyoLinux/pyoconnect_manager.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Vous aurez donc la possibilité de vous connecter ou vous déconnecter à votre Myo. La connexion vous permet de démarrer les scripts qui sont sur ON. &lt;/p&gt;
&lt;p&gt;Dans l’exemple précédent, par défaut, le module de prise en main de LibreOffice Impress est actif.&lt;/p&gt;
&lt;p&gt;Si vous cliquez sur Disconnect, votre Myo rentrera en veille prolongée au bout de 3 minutes. J’ai demandé au développeur s’il ne pouvait pas mettre à disposition le “Turn Off” mais il m’a répondu que pour l’instant, ça ne fait pas partie de sa roadmap.&lt;/p&gt;
&lt;h1 id=&quot;Comment-aller-plus-loin&quot;&gt;&lt;a href=&quot;#Comment-aller-plus-loin&quot; class=&quot;headerlink&quot; title=&quot;Comment aller plus loin ?&quot;&gt;&lt;/a&gt;Comment aller plus loin ?&lt;/h1&gt;&lt;p&gt;C’est bien beau tout ça, mais si j’ai envie d’avoir un contrôle un peu plus poussé de certaines de mes applications comment je dois procéder ?&lt;/p&gt;
&lt;h2 id=&quot;Gestion-des-scripts&quot;&gt;&lt;a href=&quot;#Gestion-des-scripts&quot; class=&quot;headerlink&quot; title=&quot;Gestion des scripts&quot;&gt;&lt;/a&gt;Gestion des scripts&lt;/h2&gt;&lt;p&gt;Le développeur à prévu les choses simplement. En effet, pour ajouter des fonctionnalités à son manager, il vous suffit simplement d’ajouter un script pyhton répondant au sdk lua de Thalmic dans le répertoire “scripts” de  &lt;code&gt;$PYO_PATH&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ainsi, au prochain démarrage, vous aurez la possibilité de démarrer ou arrêter votre Myo ! That’s all falks ! &lt;/p&gt;
&lt;h2 id=&quot;Surcouche-Python&quot;&gt;&lt;a href=&quot;#Surcouche-Python&quot; class=&quot;headerlink&quot; title=&quot;Surcouche Python&quot;&gt;&lt;/a&gt;Surcouche Python&lt;/h2&gt;&lt;p&gt;Le développeur à pensé a tout en nous mettant à disposition le SDK de Myo via Python : &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;C’est du coup très rapide d’écrire du code pour contrôler des éléments. Et accessoirement, ça tourne aussi sous windows &amp;amp; mac ;)&lt;/li&gt;
&lt;li&gt;On voit que l’équipe de Thalmic a vraiment bien bossé en mettant une grosse couche d’abstraction sur la complexité du Myo.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Voici par exemple ce qu’il est possible de faire : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identifier la fenêtre à l’écran et n’activer le script que dans cette fenêtre&lt;/li&gt;
&lt;li&gt;Action avec la souris : &lt;ul&gt;
&lt;li&gt;Déplacement de la souris&lt;/li&gt;
&lt;li&gt;Clic Droit&lt;/li&gt;
&lt;li&gt;Clic Gauche&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Actions claviers : &lt;ul&gt;
&lt;li&gt;Émission d’une touche selon 3 états : Down / Up / Press (down &amp;amp; up rapidement)&lt;/li&gt;
&lt;li&gt;Gestion des touches de type SHIFT / CTRL, pour pouvoir gérer les combinaisons de touches.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Actions sur le Myo : &lt;ul&gt;
&lt;li&gt;Connexion / Déconnexion&lt;/li&gt;
&lt;li&gt;Vibration &lt;/li&gt;
&lt;li&gt;Récupération des métriques liées au Myo : Yaw / Pitch / Roll / ….&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cerise sur le gâteau il a même ajouté des méthodes qui ne sont pas présentes dans le SDK Lua. Je vous conseille d’aller voir la partie “Library Documentation” sur le site officiel de PyoConnect pour prendre connaissance de ces ajouts : &lt;a href=&quot;http://www.fernandocosentino.net/pyoconnect/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.fernandocosentino.net/pyoconnect/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Il y a juste quelques méthodes qui à l’opposé ne sont pas implémentées. Ceci est bien expliqué à la fin de sa documentation.&lt;/p&gt;
&lt;h1 id=&quot;Controle-de-presentation-HML5&quot;&gt;&lt;a href=&quot;#Controle-de-presentation-HML5&quot; class=&quot;headerlink&quot; title=&quot;Contrôle de présentation HML5&quot;&gt;&lt;/a&gt;Contrôle de présentation HML5&lt;/h1&gt;&lt;p&gt;Du coup, passé cette première lecture, je me suis lancé dans mon premier script : Contrôle de mes présentations HTML5 par le bracelet. Le “use case” est vraiment très simple : &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;je veux délocker mon Myo sur la gestion &lt;code&gt;doubleTap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Une fois ce dernier délocker, je veux passer mes slides avec cette même gesture.&lt;/li&gt;
&lt;li&gt;Enfin, je veux pouvoir locker le Myo sur la gesture &lt;code&gt;fist&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scriptTitle = &lt;span class=&quot;string&quot;&gt;&quot;KeyBoard&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scriptDescription = &lt;span class=&quot;string&quot;&gt;&quot;Keyboard Control&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onUnlock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myo.unlock(&lt;span class=&quot;string&quot;&gt;&quot;hold&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;Unlock ! &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onLock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;Lock ! &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onPoseEdge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pose, edge)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (edge == &lt;span class=&quot;string&quot;&gt;&quot;on&quot;&lt;/span&gt;):  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(pose)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pose == &lt;span class=&quot;string&quot;&gt;&#39;doubleTap&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; (edge == &lt;span class=&quot;string&quot;&gt;&quot;on&quot;&lt;/span&gt;): &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        myo.keyboard(&lt;span class=&quot;string&quot;&gt;&quot;right_arrow&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;press&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pose == &lt;span class=&quot;string&quot;&gt;&#39;fist&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; (edge == &lt;span class=&quot;string&quot;&gt;&quot;on&quot;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        myo.lock()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Voici ce qu’on peut retenir de ce script&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scriptTitle = &lt;span class=&quot;string&quot;&gt;&quot;KeyBoard&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scriptDescription = &lt;span class=&quot;string&quot;&gt;&quot;Keyboard Control&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Je spécifie son nom tel qu’il apparaîtra dans le manager PyoConnect&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onUnlock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myo.unlock(&lt;span class=&quot;string&quot;&gt;&quot;hold&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;Unlock ! &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Quand le Myo passe en Unlock, je lui demande de le rester (car sinon, je pourrais lui demander de se locker automatiquement en fonction d’un certain temps)&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onPoseEdge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pose, edge)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (edge == &lt;span class=&quot;string&quot;&gt;&quot;on&quot;&lt;/span&gt;):  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(pose)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pose == &lt;span class=&quot;string&quot;&gt;&#39;doubleTap&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; (edge == &lt;span class=&quot;string&quot;&gt;&quot;on&quot;&lt;/span&gt;): &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        myo.keyboard(&lt;span class=&quot;string&quot;&gt;&quot;right_arrow&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;press&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pose == &lt;span class=&quot;string&quot;&gt;&#39;fist&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; (edge == &lt;span class=&quot;string&quot;&gt;&quot;on&quot;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        myo.lock()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Enfin, je gère les poses Myo pour correspondre à mon besoin. Le Edge correspond à l’état de détection de la pose par le Myo : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;on : la gesture commence&lt;/li&gt;
&lt;li&gt;off : la gesture se termine&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Je pense qu’il faut que je joue encore un peu avec ce script mais globalement, il répond bien à mon besoin de simplement passer des slides.&lt;/p&gt;
&lt;p&gt;Je tacherais de publier des scripts un peu plus pousser prochainement ;)&lt;/p&gt;
&lt;h1 id=&quot;Pour-aller-encore-plus-loin&quot;&gt;&lt;a href=&quot;#Pour-aller-encore-plus-loin&quot; class=&quot;headerlink&quot; title=&quot;Pour aller encore plus loin&quot;&gt;&lt;/a&gt;Pour aller encore plus loin&lt;/h1&gt;&lt;p&gt;Si vous êtes intéressés par le développement Myo, je vous conseille de suivre le blog de Thalmic : &lt;a href=&quot;http://developerblog.myo.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developerblog.myo.com/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/2015-12-MyoLinux/myo_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Cette semaine à SQLI, lors d’une soirée Hack, j’ai eu l’occasion de prend
    
    </summary>
    
      <category term="Tech" scheme="http://jef.binomed.fr/categories/Tech/"/>
    
    
      <category term="linux" scheme="http://jef.binomed.fr/tags/linux/"/>
    
      <category term="myo" scheme="http://jef.binomed.fr/tags/myo/"/>
    
  </entry>
  
  <entry>
    <title>Connectez votre rameur d&#39;appartement avec Chrome</title>
    <link href="http://jef.binomed.fr/2015/10/30/2015-10-30--Connectez-votre-rameur-d-appartement-avec-Chrome/"/>
    <id>http://jef.binomed.fr/2015/10/30/2015-10-30--Connectez-votre-rameur-d-appartement-avec-Chrome/</id>
    <published>2015-10-30T15:36:24.000Z</published>
    <updated>2016-02-26T15:02:46.773Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Connectez-votre-rameur-d’appartement-avec-Chrome&quot;&gt;&lt;a href=&quot;#Connectez-votre-rameur-d’appartement-avec-Chrome&quot; class=&quot;headerlink&quot; title=&quot;Connectez votre rameur d’appartement avec Chrome&quot;&gt;&lt;/a&gt;Connectez votre rameur d’appartement avec Chrome&lt;/h2&gt;&lt;p&gt;WiiFit, AppleHealt, Google Fit, tout ça c’est du passé ! Place à SkiffSimulator !!&lt;/p&gt;
&lt;div class=&quot;center&quot;&gt;&lt;br&gt;    &lt;img src=&quot;/assets/2015-10-Skiff/rameur_Accueil.png&quot; class=&quot;center&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;Nous allons voir à travers cet article comment réaliser un rameur connecté et ainsi vous permettre de vous amuser en faisant du sport ! &lt;/p&gt;
&lt;p&gt;La version présentée dans cet article est une V1 dépendant d’un ordinateur. Il pourrait être très facile de faire évoluer l’application pour qu’elle soit autonome sur un équipement de type Raspberry par la suite.&lt;/p&gt;
&lt;h2 id=&quot;Principe&quot;&gt;&lt;a href=&quot;#Principe&quot; class=&quot;headerlink&quot; title=&quot;Principe&quot;&gt;&lt;/a&gt;Principe&lt;/h2&gt;&lt;p&gt;Grâce à l’&lt;a href=&quot;https://developer.chrome.com/apps/serial&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;API serial&lt;/a&gt; de Google Chrome, nous allons relier directement notre rameur à notre navigateur pour créer un jeu qui nous permettra de jouer à un jeu 8bit. Voici globalement un schéma symbolisant le montage à effectuer : &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2015-10-Skiff/schema_skiff.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Nous allons faire communiquer 2 programmes entre eux : &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;un sketch Arduino qui va mesurer la distance du joueur sur le rameur&lt;/li&gt;
&lt;li&gt;une Application Chrome avec d’un côté :&lt;br&gt;a. la partie Chrome App qui va lire le port série&lt;br&gt;b. la partie Jeu qui va lire les informations provenant de la Chrome App&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Comme tout ceci n’est pas bien compliqué, j’ai décidé de tout coder from scratch afin de me faire la main sur les possibilités offertes par cet écosystème. Côté application web, nous avons un simple canvas afin de tirer parti de l’accélération matérielle. Côté matériel, j’ai opté un simple arduino avec un capteur ultrason.&lt;/p&gt;
&lt;h2 id=&quot;Shopping-List&quot;&gt;&lt;a href=&quot;#Shopping-List&quot; class=&quot;headerlink&quot; title=&quot;Shopping List&quot;&gt;&lt;/a&gt;Shopping List&lt;/h2&gt;&lt;p&gt;Voici les pré requis en terme d’achat pour réaliser cette démonstration : &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;un rameur (~20€ sur le bon coin)&lt;/li&gt;
&lt;li&gt;un Arduinio nano (~trouvé à 6€ sur tinyDeal)&lt;/li&gt;
&lt;li&gt;une breadboard (~2€ sur tinyDeal)&lt;/li&gt;
&lt;li&gt;un capteur ultrason HC-SR04(~1,5€ sur tinyDeal)&lt;/li&gt;
&lt;li&gt;un fil MiniUSB -&amp;gt; USB (fourni avec l’arduino)&lt;/li&gt;
&lt;li&gt;des fils pour notre montage&lt;/li&gt;
&lt;li&gt;un ordinateur avec Chrome&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Un-jeu-en-HTML&quot;&gt;&lt;a href=&quot;#Un-jeu-en-HTML&quot; class=&quot;headerlink&quot; title=&quot;Un jeu en HTML ?&quot;&gt;&lt;/a&gt;Un jeu en HTML ?&lt;/h2&gt;&lt;p&gt;Avant de commencer, il m’a fallu me renseigner sur le fonctionnement d’un jeu et voir comment j’allais procéder pour respecter au mieux les bonnes pratiques en vigueur. &lt;/p&gt;
&lt;p&gt;Globalement, un jeu possède plusieurs briques qui fonctionnent en parallèle afin de minimiser le blocage de l’UI. Pour rappel, un jeu est considéré comme fluide s’il est à 60fps ce qui veut dire que chaque affichage ne doit pas dépasser les 13ms. Afin de respecter au mieux cette contrainte, j’ai découpé mon programme : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;la brique qui s’occupe de l’affichage va lire dans un modèle partagé&lt;/li&gt;
&lt;li&gt;la brique qui s’occupe de lire les données de l’arduino va alimenter ce modèle partagé et faire les calculs nécessaires&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;De cette façon, j’ai une séparation propre de mes interactions et des actions provenant de l’extérieur pouvant parfois bloquer mon interface. Il est à noter qu’avec ce fonctionnement, je tolère une désyncrhonisation entre l’état de mon modèle et mon affichage. Je pars du principe que celle-ci sera de maximum 13ms, ce qui est acceptable.&lt;/p&gt;
&lt;h2 id=&quot;Sketch-Arduino&quot;&gt;&lt;a href=&quot;#Sketch-Arduino&quot; class=&quot;headerlink&quot; title=&quot;Sketch Arduino&quot;&gt;&lt;/a&gt;Sketch Arduino&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/assets/2015-10-Skiff/schema_bb.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Pour le cpateur à ultrasons&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; TriggerPin = &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Trig pin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; EchoPin = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Echo pin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; distance; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Serial.begin(&lt;span class=&quot;number&quot;&gt;9600&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//Mise en entrées de Pins&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//On initialise le capteur à ultrasons&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   pinMode(TriggerPin, OUTPUT); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   digitalWrite(TriggerPin, LOW); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   pinMode(EchoPin, INPUT); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   delay(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Serial.println(&lt;span class=&quot;string&quot;&gt;&quot;Fin SETUP capteurs&quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   distance = lire_distance(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Serial.print(&lt;span class=&quot;string&quot;&gt;&quot;D&quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Serial.println(distance); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//Envoi des données en BT : &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   delay(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lire_distance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; lecture_echo; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   digitalWrite(TriggerPin, HIGH); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   delayMicroseconds(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   digitalWrite(TriggerPin, LOW); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   lecture_echo = pulseIn(EchoPin, HIGH); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; cm = lecture_echo / &lt;span class=&quot;number&quot;&gt;58&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;(cm); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Le fonctionnement est très simple : il suffit de lire la mesure de distance dès que l’on en obtient une, puis on la retranscrit directement sur le port série.&lt;/p&gt;
&lt;h2 id=&quot;ChromeApp&quot;&gt;&lt;a href=&quot;#ChromeApp&quot; class=&quot;headerlink&quot; title=&quot;ChromeApp ?&quot;&gt;&lt;/a&gt;ChromeApp ?&lt;/h2&gt;&lt;p&gt;Comme il s’agit d’une application chrome, nous devons créer un fichier &lt;a href=&quot;https://developer.chrome.com/extensions/manifest&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;manifest.json&lt;/a&gt; :  &lt;a href=&quot;https://github.com/sqli-nantes/skiff-simulator/blob/master/chromeApp%2Fmanifest.json&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Manifest de SkiffSumulator&lt;/a&gt; qui correspond au fichier de configuration de l’application chrome. &lt;/p&gt;
&lt;h3 id=&quot;Structure-de-l’application&quot;&gt;&lt;a href=&quot;#Structure-de-l’application&quot; class=&quot;headerlink&quot; title=&quot;Structure de l’application&quot;&gt;&lt;/a&gt;Structure de l’application&lt;/h3&gt;&lt;p&gt;L’application possède donc plusieurs scripts qui vont tourner en parallèle afin de faire fonctionner le jeu. Voici la structure de mon projet côté application web : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;assets : répertoire possèdant tous les fichiers de ressources du jeu (Fonts, images, sons)&lt;/li&gt;
&lt;li&gt;javascript : ensemble des srcipts javascript constituant l’application&lt;/li&gt;
&lt;li&gt;scss : fichier sass qui vont servir à générer le css&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nous allons nous attarder uniquement sur les scripts car c’est dans cette partie que se situe toute l’intelligence du jeu. En effet, le fichier html est très sommaire car il ne contient qu’un canvas : &lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Skiff Almost Simulator&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;icon&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;image/png&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;./assets/images/icon48.png&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&lt;span class=&quot;value&quot;&gt;href=&quot;.&lt;/span&gt;/&lt;span class=&quot;attribute&quot;&gt;css&lt;/span&gt;/&lt;span class=&quot;attribute&quot;&gt;app.css&lt;/span&gt;&quot;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;skiff&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;placeholder&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;Enter your name&#39;&lt;/span&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;./javascript/resources.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;./javascript/audio.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;./javascript/const.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;./javascript/chrome_storage.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;./javascript/chrome_serial.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;./javascript/screen_accueil.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;./javascript/screen_action.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;./javascript/screen_end.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;./javascript/app.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Scripts-et-roles&quot;&gt;&lt;a href=&quot;#Scripts-et-roles&quot; class=&quot;headerlink&quot; title=&quot;Scripts et rôles&quot;&gt;&lt;/a&gt;Scripts et rôles&lt;/h3&gt;&lt;p&gt;Voici les différents fichiers et leur rôles : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;app.js : coeur de l’application, il s’agit du point d’entrée de l’application et il agit comme un chef d’orchestre. C’est dans un sens le contrôleur de notre application&lt;/li&gt;
&lt;li&gt;audio.js : fichier servant à gérer la lecture des fichiers audio&lt;/li&gt;
&lt;li&gt;chrome_serial.js : fichier contenant le code spécifique à Chrome qui va nous permettre de lire directement depuis le port série de l’ordinateur&lt;/li&gt;
&lt;li&gt;chrome_storage.js : fichier utilitaire qui expose de façon uniforme une API de localstorage au cas où l’application devrait tourner en dehors de Chrome (plus de détails plus loin dans l’article)&lt;/li&gt;
&lt;li&gt;const.js : fichier regroupant toutes les constantes du jeu. Il peut s’agir de simples constantes ou de variables d’ajustement servant lors de la calibration du jeu&lt;/li&gt;
&lt;li&gt;ressources.js : fichier permettant d’exposer un mécanisme de chargement de ressources graphiques en vue de les exploiter par la suite dans le programme&lt;/li&gt;
&lt;li&gt;screen_acceuil.js : fichier contenant tout le code spécifique à l’affichage de l’écran d’accueil&lt;/li&gt;
&lt;li&gt;screen_action.js : fichier contenant tout le code spécifique à l’affichage pendant le jeu&lt;/li&gt;
&lt;li&gt;screen_end.js : fichier contenant tout le code spécifique à l’affiche de l’écran de fin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Le &lt;a href=&quot;https://carldanley.com/js-revealing-module-pattern/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reveal Module Pattern&lt;/a&gt; a été choisi comme pattern car il permet de fonctionner en module javascript et d’offrir un découpage propre du code tout en maîtrisant les méthodes exposées.&lt;/p&gt;
&lt;h2 id=&quot;Deroulement-du-programme&quot;&gt;&lt;a href=&quot;#Deroulement-du-programme&quot; class=&quot;headerlink&quot; title=&quot;Déroulement du programme :&quot;&gt;&lt;/a&gt;Déroulement du programme :&lt;/h2&gt;&lt;p&gt;Prenons les différents points méritant de l’attention : &lt;/p&gt;
&lt;h3 id=&quot;Demarage-App-js&quot;&gt;&lt;a href=&quot;#Demarage-App-js&quot; class=&quot;headerlink&quot; title=&quot;Démarage (App.js)&quot;&gt;&lt;/a&gt;Démarage (App.js)&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//API&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;load&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   pageLoad); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   init : init, ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AppSAS.init();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;On démarre l’application dès que la page est prête.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pi&quot;&gt;&#39;use strict&#39;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; AppSAS = AppSAS || &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   … &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pageLoad&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// On se connecte à l&#39;arduino&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         skiffSimulatorChrome.initArduino(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(&lt;span class=&quot;string&quot;&gt;&quot;Error : %s \n %s&quot;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         err.message, err.stack); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;On doit faire appel au module qui va lire les données de l’arduino.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// On initialise le canvas&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ui.input = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;user&#39;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ui.canvas = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;skiff&#39;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ui.canvas.width = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerWidth; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ui.canvas.height = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerHeight; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ui.context = ui.canvas.getContext(&lt;span class=&quot;string&quot;&gt;&#39;2d&#39;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ui.canvas.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, checkClick, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// On précharge toutes les ressources nécessaires&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ui.resources.loadSprites([ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   title : &lt;span class=&quot;string&quot;&gt;&#39;logo&#39;&lt;/span&gt;, url : &lt;span class=&quot;string&quot;&gt;&#39;assets/images/logo.png&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   title : &lt;span class=&quot;string&quot;&gt;&#39;game_over&#39;&lt;/span&gt;, url : &lt;span class=&quot;string&quot;&gt;&#39;assets/images/gameover.png&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   title : &lt;span class=&quot;string&quot;&gt;&#39;rive_gauche_portrait&#39;&lt;/span&gt;, url : &lt;span class=&quot;string&quot;&gt;&#39;assets/images/riviere_gauche_portrait.png&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;, ... ]) .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   paintSkiff(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;).catch(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(&lt;span class=&quot;string&quot;&gt;&quot;Error : %s \n %s&quot;&lt;/span&gt;, err.message, err.stack); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;On initialise notre canvas ainsi que les ressources graphiques du projet. On n’affiche le jeu qu’une fois ces dernières chargées.&lt;/p&gt;
&lt;h3 id=&quot;En-fonctionnement-app-js&quot;&gt;&lt;a href=&quot;#En-fonctionnement-app-js&quot; class=&quot;headerlink&quot; title=&quot;En fonctionnement (app.js)&quot;&gt;&lt;/a&gt;En fonctionnement (app.js)&lt;/h3&gt;&lt;p&gt;Une fois l’application réellement démarrée avec la méthode paintSkiff. Nous allons simplement déléguer l’affichage aux méthodes appropriées : &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Gère l&#39;affichage de l&#39;écran&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;paintSkiff&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ... &lt;span class=&quot;comment&quot;&gt;// Affichage des décors&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      paintBackground(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (gameModel.stateGame === constState.STATE_ACCUEIL) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         ScreenSasAccueil.paintSkiffAccueil(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         StorageSAS.manageGhost(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (gameModel.stateGame === constState.STATE_RUNNING) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;// On doit peindre le fantome du jeu en deuxième car son alpha nous indique où il est&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         ScreenSasAction.paintSkiffAction(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         ScreenSasAction.paintSkiffGhost(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;// On ajoute l&#39;état à l&#39;historique&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         gameModel.currentHistory.push( &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            direction : gameModel.direction, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            distanceSkiff : + gameModel.distanceSkiff, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            distanceArduino : + gameModel.distanceArduino &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         ); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         gameModel.step++; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (gameModel.stateGame === constState.STATE_END) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         ScreenSasEnd.paintSkiffEnd(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.requestAnimationFrame(paintSkiff); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(&lt;span class=&quot;string&quot;&gt;&quot;Error : %s \n %s&quot;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      err.message, err.stack); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Il est à noter que l’on utilise la méthode window.requestAnimtionFrame. Cette dernière est très importante car elle permet d’optimiser l’affichage de nos écrans en fonction de la puissance de la machine. En effet, la méthode de callback ne sera appelée une fois le navigateur prêt à effectuer une nouvelle mise à jour graphique. Il faut donc utiliser cette méthode à la place d’un setInterval&lt;/p&gt;
&lt;h3 id=&quot;Affichage-des-ecrans&quot;&gt;&lt;a href=&quot;#Affichage-des-ecrans&quot; class=&quot;headerlink&quot; title=&quot;Affichage des écrans&quot;&gt;&lt;/a&gt;Affichage des écrans&lt;/h3&gt;&lt;p&gt;L’affichage des écrans se fait toujours de la même façon : &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;on nettoie le canvas&lt;/li&gt;
&lt;li&gt;on dessine une ou des images sur le canvas&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;L’affichage d’un écran se fait toujours de la façon suivante : &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ui.context.drawImage(imgSource &lt;span class=&quot;comment&quot;&gt;//L’image source&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;, sx &lt;span class=&quot;comment&quot;&gt;//sx clipping de l&#39;image originale&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;, sy &lt;span class=&quot;comment&quot;&gt;//sy clipping de l&#39;image originale&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;, sw &lt;span class=&quot;comment&quot;&gt;// swidth clipping de l&#39;image originale&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;, sh &lt;span class=&quot;comment&quot;&gt;// sheight clipping de l&#39;image originale&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;, dx &lt;span class=&quot;comment&quot;&gt;// x Coordonnées dans le dessin du canvas&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;, dy &lt;span class=&quot;comment&quot;&gt;// y Coordonnées dans le dessing du canvas&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;, dw &lt;span class=&quot;comment&quot;&gt;// width taille du dessin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;, dh &lt;span class=&quot;comment&quot;&gt;// height taille du dessin &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;div class=&quot;center&quot;&gt;&lt;br&gt;    &lt;img src=&quot;/assets/2015-10-Skiff/drawImage.png&quot; class=&quot;center&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;Les animations / constructions des écrans ne sont en fait qu’une succession de drawImage ou fillText.&lt;/p&gt;
&lt;h3 id=&quot;Gestion-des-interactions&quot;&gt;&lt;a href=&quot;#Gestion-des-interactions&quot; class=&quot;headerlink&quot; title=&quot;Gestion des interactions&quot;&gt;&lt;/a&gt;Gestion des interactions&lt;/h3&gt;&lt;p&gt;Afin de pouvoir démarrer l’application, nous devons gérer les clicks sur le canvas. Le problème est que lorsque nous dessinons des images, nous ne pouvons pas avoir accès à un équivalent de onClick sur une zone graphique précise. Nous devons donc écouter les clicks sur le canvas et calculer si la zone de click correspond à une zone d’interaction de notre ihm.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Gère les clicks en fonction de l&#39;état du jeu&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;checkClick&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (gameModel.stateGame != constState.STATE_RUNNING) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; btnStart = ui.resources.images[&lt;span class=&quot;string&quot;&gt;&#39;btn_start&#39;&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; finalHeight = btnStart.height * ui.ratio, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      finalWidth = btnStart.width * ui.ratio; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = (ui.canvas.width / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) - ((btnStart.width * ui.ratio) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;), y = ui.canvas.height - finalHeight - (isPortrait() ? &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xClick = event.pageX, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      yClick = event.pageY; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (yClick &amp;gt; y &amp;amp;&amp;amp; yClick &amp;lt; (y + finalHeight) &amp;amp;&amp;amp; xClick &amp;gt; x &amp;amp;&amp;amp; xClick &amp;lt; (x + finalWidth)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;// On change l&#39;état du jeu&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         gameModel.stateGame = gameModel.stateGame === constState.STATE_ACCUEIL ? constState.STATE_RUNNING : constState.STATE_ACCUEIL; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ... &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Gestion-du-moteur&quot;&gt;&lt;a href=&quot;#Gestion-du-moteur&quot; class=&quot;headerlink&quot; title=&quot;Gestion du moteur&quot;&gt;&lt;/a&gt;Gestion du moteur&lt;/h3&gt;&lt;p&gt;Un des éléments clés du programme est l’alimentation du modèle depuis l’application chrome. L’application chrome va alimenter le modèle et déterminer un certain nombre d’éléments en lien avec le rendu souhaité, puis appeler le moteur de calcul pour terminer les traitements. On vérifie par exemple dans quel sens va le joueur, s’il y a eu un déplacement, etc.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Calcul &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setDistance&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;distance&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (gameModel.distanceArduino === distance) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      gameModel.direction = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (gameModel.distanceArduino &amp;gt; distance) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      gameModel.direction = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      gameModel.direction = - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// Vitesse en cm / ms&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; deltaCM = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.abs(gameModel.distanceArduino - distance); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (deltaCM &amp;gt; ConstSAS.MIN_DELTA_CM) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      gameModel.speed = deltaCM / ConstSAS.DELAY; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      gameModel.speed = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.max(gameModel.speed - ConstSAS.FACTOR_SPEED, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   gameModel.distanceArduino = distance; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   engineSkiff(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Le coeur du moteur quant à lui, s’occupe uniquement de lire les données issues de l’arduino et de calculer la distance globale parcourue, ainsi que le pourcentage de déplacements dans l’écran.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;engineSkiff&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (gameModel.speed &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; gameModel.stateGame === constState.STATE_RUNNING) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; distanceSpeed = gameModel.speed * ConstSAS.DELAY; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// On incrémente la distance&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      gameModel.distanceSkiff += (distanceSpeed * ConstSAS.FACTOR_DISTANCE); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// On gère l&#39;effet de déplacement des bords via un pourcentage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      gameModel.percent = (gameModel.distanceSkiff % &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;) / &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Specifique-Chrome&quot;&gt;&lt;a href=&quot;#Specifique-Chrome&quot; class=&quot;headerlink&quot; title=&quot;Spécifique Chrome&quot;&gt;&lt;/a&gt;Spécifique Chrome&lt;/h2&gt;&lt;p&gt;Depuis le début nous parlons d’application chrome et de l’API Serial, il est désormais temps de voir comment nous implémentons cette partie.&lt;/p&gt;
&lt;h3 id=&quot;Interaction-avec-l’Arduino&quot;&gt;&lt;a href=&quot;#Interaction-avec-l’Arduino&quot; class=&quot;headerlink&quot; title=&quot;Interaction avec l’Arduino&quot;&gt;&lt;/a&gt;Interaction avec l’Arduino&lt;/h3&gt;&lt;p&gt;Toute l’interaction avec L’arduino se fait directement via le port série. Mais il faut pour cela passer par des étapes clés : &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;récupérer les appareils connectés sur les ports série “chrome.serial.getDevices”&lt;/li&gt;
&lt;li&gt;une fois un appareil trouvé, on s’y connecte “chrome.serial.connect”. Dans notre exemple, on veille à ce qu’il n’y ai qu’un appareil de connecté au moment du lancement de l’application&lt;/li&gt;
&lt;li&gt;lire le port série “chrome.serial.onReceive”&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initArduino&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   chrome.serial.getDevices(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;ports&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ports &amp;amp;&amp;amp; ports.length == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         chrome.serial.connect(ports[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].path, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         onOpenArduino); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onOpenArduino&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;openInfo&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   connectionId = openInfo.connectionId; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;connectionId: &quot;&lt;/span&gt; + connectionId); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (connectionId == - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Could not open&#39;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Connected&#39;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   chrome.serial.onReceive.addListener(onReadArduino); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;convertArrayBufferToString&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;buf&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.fromCharCode.apply(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Uint8Array&lt;/span&gt;(buf)); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onReadArduino&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;readInfo&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (readInfo.connectionId == connectionId &amp;amp;&amp;amp; readInfo.data) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str = convertArrayBufferToString(readInfo.data); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (str.charAt(str.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) === &lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         value += str.substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         str.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (regExp.test(value)) &lt;span class=&quot;comment&quot;&gt;// Light on and off&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; distanceTmp = + regExp.exec(value)[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (distanceTmp &amp;lt; ConstSAS.DISTANCE_MAX &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.abs(distance - distanceTmp) &amp;lt; (ConstSAS.DISTANCE_MAX * &lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;) ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               AppSAS.setDistance(distanceTmp); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            distance = distanceTmp; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         value = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         value += str; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Il faut noter une petite particularité lors de la lecture : nous lisons le port série et nous attendons une chaîne de caractères. Aussi, il est important de penser à convertir les données issues du port série en données exploitables sous forme de chaîne de caractères.&lt;/p&gt;
&lt;h2 id=&quot;Gestion-des-ecrans-et-cas-particuliers&quot;&gt;&lt;a href=&quot;#Gestion-des-ecrans-et-cas-particuliers&quot; class=&quot;headerlink&quot; title=&quot;Gestion des écrans et cas particuliers&quot;&gt;&lt;/a&gt;Gestion des écrans et cas particuliers&lt;/h2&gt;&lt;p&gt;Maintenant que nous avons vu la mécanique sous le capot, regardons de plus près quelques cas particuliers qui méritent un peu d’attention.&lt;/p&gt;
&lt;h3 id=&quot;Deplacement-du-decor&quot;&gt;&lt;a href=&quot;#Deplacement-du-decor&quot; class=&quot;headerlink&quot; title=&quot;Déplacement du décor&quot;&gt;&lt;/a&gt;Déplacement du décor&lt;/h3&gt;&lt;p&gt;Afin de donner une sensation de déplacement, il nous faut bouger nos rives. Pour se faire, on va simplement fonctionner avec un indicateur en pourcentage en rapport avec le déplacement global du rameur. Ainsi pour afficher correctement nos 2 rives qui bougent, il nous suffit juste de dessiner 2 fois chaque rive de chaque côté afin de gérer les dépassement d’écran et de les positionner en fonction d’un pourcentage résultant d’un modulo de la distance du rameur : &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Affiche le rivage en fonction de la rive souhaitée et de la progression du rameur&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;paintRive&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;riveDroite&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; rive = ui.resources.images[(riveDroite ? &lt;span class=&quot;string&quot;&gt;&#39;rive_droite&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;rive_gauche&#39;&lt;/span&gt;) + getSuffix()]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; finalHeight = rive.height * ui.ratio, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   finalWidth = rive.width * ui.ratio; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ui.context.drawImage(rive , &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//sx clipping de l&#39;image originale&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//sy clipping de l&#39;image originale&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , rive.width &lt;span class=&quot;comment&quot;&gt;// swidth clipping de l&#39;image originale&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , rive.height &lt;span class=&quot;comment&quot;&gt;// sheight clipping de l&#39;image originale&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , riveDroite ? ui.canvas.width - finalWidth : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// x Coordonnées dans le dessing du canvas&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; - (finalHeight * gameModel.percent) &lt;span class=&quot;comment&quot;&gt;// y Coordonnées dans le dessing du canvas&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , finalWidth &lt;span class=&quot;comment&quot;&gt;// width taille du dessin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , finalHeight &lt;span class=&quot;comment&quot;&gt;// height taille du dessin &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ui.context.drawImage(rive , &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//sx clipping de l&#39;image originale&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//sy clipping de l&#39;image originale&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , rive.width &lt;span class=&quot;comment&quot;&gt;// swidth clipping de l&#39;image originale&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , rive.height &lt;span class=&quot;comment&quot;&gt;// sheight clipping de l&#39;image originale&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , riveDroite ? ui.canvas.width - finalWidth : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// x Coordonnées dans le dessing du ui.canvas&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , finalHeight - (finalHeight * gameModel.percent) &lt;span class=&quot;comment&quot;&gt;// y Coordonnées dans le dessing du canvas&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , finalWidth &lt;span class=&quot;comment&quot;&gt;// width taille du dessin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , finalHeight &lt;span class=&quot;comment&quot;&gt;// height taille du dessin &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;L’affichage-du-rameur&quot;&gt;&lt;a href=&quot;#L’affichage-du-rameur&quot; class=&quot;headerlink&quot; title=&quot;L’affichage du rameur&quot;&gt;&lt;/a&gt;L’affichage du rameur&lt;/h3&gt;&lt;p&gt;L’affichage du rameur comporte 2 parties à prendre en compte : &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;l’affichage du rameur en fonction de la position du joueur&lt;/li&gt;
&lt;li&gt;l’avancée du rameur quand le mode ghost est activé&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Position-du-rameur-en-fonction-du-joueur&quot;&gt;&lt;a href=&quot;#Position-du-rameur-en-fonction-du-joueur&quot; class=&quot;headerlink&quot; title=&quot;Position du rameur en fonction du joueur&quot;&gt;&lt;/a&gt;Position du rameur en fonction du joueur&lt;/h4&gt;&lt;p&gt;Afin de restituer au mieux les gestes effectués par le joueur, il a fallu réfléchir à une façon d’afficher la bonne image de rameur, en fonction de sa position sur le rameur.&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;img src=&quot;/assets/2015-10-Skiff/A1_portrait.png&quot; class=&quot;imgskiff&quot;&gt;&lt;img src=&quot;/assets/2015-10-Skiff/A2_portrait.png&quot; class=&quot;imgskiff&quot;&gt;&lt;img src=&quot;/assets/2015-10-Skiff/A3_portrait.png&quot; class=&quot;imgskiff&quot;&gt;&lt;img src=&quot;/assets/2015-10-Skiff/A4_portrait.png&quot; class=&quot;imgskiff&quot;&gt;&lt;img src=&quot;/assets/2015-10-Skiff/A5_portrait.png&quot; class=&quot;imgskiff&quot;&gt;&lt;img src=&quot;/assets/2015-10-Skiff/R1_portrait.png&quot; class=&quot;imgskiff&quot;&gt;&lt;img src=&quot;/assets/2015-10-Skiff/R2_portrait.png&quot; class=&quot;imgskiff&quot;&gt;&lt;img src=&quot;/assets/2015-10-Skiff/R3_portrait.png&quot; class=&quot;imgskiff&quot;&gt;&lt;img src=&quot;/assets/2015-10-Skiff/R4_portrait.png&quot; class=&quot;imgskiff&quot;&gt;&lt;img src=&quot;/assets/2015-10-Skiff/R5_portrait.png&quot; class=&quot;imgskiff&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;

&lt;p&gt; La réponse était relativement simple :  il suffit de connaître à chaque instant la position du joueur sur le rameur et sa direction, puis d’appliquer la bonne image.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;indexToUse&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;direction, distance&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arrayToUse = direction &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ? mappingPositonRameurFront : mappingPositonRameurBack; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; arrayToUse.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; minMax = arrayToUse[i]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (distance &amp;gt; minMax.min &amp;amp;&amp;amp; distance &amp;lt;= minMax.max) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; minMax.indexSprite + AppSAS.getSuffix(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mappingPositonRameurBack[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].indexSprite + AppSAS.getSuffix(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Affiche le bon sprire du bateau&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;paintBoat&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//var ratio = 0.05;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; image = AppSAS.ui.resources.images[AppSAS.gameModel.indexSprite]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   AppSAS.ui.context.shadowOffsetX = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   AppSAS.ui.context.shadowOffsetY = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   AppSAS.ui.context.shadowBlur = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   AppSAS.ui.context.drawImage(image , &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//sx clipping de l&#39;image originale&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//sy clipping de l&#39;image originale&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , image.width &lt;span class=&quot;comment&quot;&gt;// swidth clipping de l&#39;image originale&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , image.height &lt;span class=&quot;comment&quot;&gt;// sheight clipping de l&#39;image originale&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , (AppSAS.ui.canvas.width / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) - ((image.width * AppSAS.ui.ratio) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// x Coordonnées dans le dessin du AppSAS.ui.canvas &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , (AppSAS.ui.canvas.height / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) - ((image.height * AppSAS.ui.ratio) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;// y Coordonnées dans le dessin du AppSAS.ui.canvas &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , image.width * AppSAS.ui.ratio &lt;span class=&quot;comment&quot;&gt;// width taille du dessin &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , image.height * AppSAS.ui.ratio &lt;span class=&quot;comment&quot;&gt;// height taille du dessin  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;De cette manière nous affichons toujours la bonne image. Puis, afin de faciliter le déplacement du bateau, il a été considéré qu’il était en position fixe sur l’écran et que l’illusion du déplacement se fait uniquement à travers le déplacement du décor.&lt;/p&gt;
&lt;h4 id=&quot;Gestion-du-ghost&quot;&gt;&lt;a href=&quot;#Gestion-du-ghost&quot; class=&quot;headerlink&quot; title=&quot;Gestion du ghost&quot;&gt;&lt;/a&gt;Gestion du ghost&lt;/h4&gt;&lt;p&gt;L’affichage du ghost doit faire face à un problème. Contrairement au bateau, ce dernier se déplace sur l’écran. Le problème est que ce déplacement vient surtout du fait qu’il a fallu gérer le cas d’un ghost allant plus vite que le joueur courant. En effet, si le ghost est meilleur que le joueur, alors, il sera vers le haut de l’écran ce qui veut dire que sa position va s’approcher de l’axe, voire aller dans les négatifs. Or dans un canvas, si un élément est dessiné avec des coordonnées de destination dans le négatif, l’élément n’est tout simplement pas peint !  Il a donc fallu tronquer l’image source pour donner l’illusion que le dessin du ghost parte vers le haut de l’écran.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Affiche le bon sprire du bateau du mode Ghost&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;paintGhost&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//var ratio = 0.05;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; image = AppSAS.ui.resources.images[AppSAS.gameModel.indexSpriteGhost]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// Le fantome doit etre dessiné là où il est au niveau de sa distance globale par rapport au bateau actuel &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// =&amp;gt; On l&#39;affiche là où est son delta en distance par rapport à bateau actuel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; stateGhost = AppSAS.gameModel.ghost[AppSAS.gameModel.step]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; deltaGhost = AppSAS.gameModel.distanceSkiff - stateGhost.distanceSkiff; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// On doit tronquer le ghost s&#39;il dépasse de l&#39;écran &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; yGhost = (AppSAS.ui.canvas.height / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) - ((image.height * AppSAS.ui.ratio) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; + (deltaGhost * ConstSAS.FACTOR_GHOST);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; heightSpriteGhost = image.height; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (yGhost &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      heightSpriteGhost = image.height + yGhost; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      yGhost = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   AppSAS.ui.context.drawImage(image , &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//sx clipping de l&#39;image originale&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , image.height - heightSpriteGhost &lt;span class=&quot;comment&quot;&gt;//sy clipping de l&#39;image originale&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , image.width &lt;span class=&quot;comment&quot;&gt;// swidth clipping de l&#39;image originale&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , heightSpriteGhost &lt;span class=&quot;comment&quot;&gt;// sheight clipping de l&#39;image originale&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , (AppSAS.ui.canvas.width / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) - ((image.width * AppSAS.ui.ratio) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// x Coordonnées dans le dessin du AppSAS.ui.canvas &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , yGhost &lt;span class=&quot;comment&quot;&gt;// y Coordonnées dans le dessin du AppSAS.ui.canvas , image.width * AppSAS.ui.ratio // width taille du dessin &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   , heightSpriteGhost * AppSAS.ui.ratio &lt;span class=&quot;comment&quot;&gt;// height taille du dessin &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Affichage-des-ecrans-de-login-amp-de-scores&quot;&gt;&lt;a href=&quot;#Affichage-des-ecrans-de-login-amp-de-scores&quot; class=&quot;headerlink&quot; title=&quot;Affichage des écrans de login &amp;amp; de scores&quot;&gt;&lt;/a&gt;Affichage des écrans de login &amp;amp; de scores&lt;/h3&gt;&lt;p&gt;Ces 2 écrans sont différents car on y affiche non pas une animation, mais tu texte.&lt;/p&gt;
&lt;h4 id=&quot;Ecran-de-Login&quot;&gt;&lt;a href=&quot;#Ecran-de-Login&quot; class=&quot;headerlink&quot; title=&quot;Ecran de Login&quot;&gt;&lt;/a&gt;Ecran de Login&lt;/h4&gt;&lt;div class=&quot;center&quot;&gt;&lt;br&gt;    &lt;img src=&quot;/assets/2015-10-Skiff/rameur_Accueil.png&quot; class=&quot;center&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;Concernant l’écran de login, il n’existe pas d’équivalent du champ input dans un canvas. Aussi, il a fallu intégrer à notre html une balise input que l’on affiche ou cache en fonction du besoin.&lt;/p&gt;
&lt;h4 id=&quot;Ecran-de-scores&quot;&gt;&lt;a href=&quot;#Ecran-de-scores&quot; class=&quot;headerlink&quot; title=&quot;Ecran de scores&quot;&gt;&lt;/a&gt;Ecran de scores&lt;/h4&gt;&lt;div class=&quot;center&quot;&gt;&lt;br&gt;    &lt;img src=&quot;/assets/2015-10-Skiff/rameur_GameOver.png&quot; class=&quot;center&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;L’affichage du score est simple car il ne s’agit que d’afficher du texte : &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;AppSAS.ui.context.fillText(MyText, x, y);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;La taille et la couleur du texte sont définis par des propriétés appliquées directement sur le context du canvas.&lt;/p&gt;
&lt;h3 id=&quot;Persistance-des-donnees&quot;&gt;&lt;a href=&quot;#Persistance-des-donnees&quot; class=&quot;headerlink&quot; title=&quot;Persistance des données&quot;&gt;&lt;/a&gt;Persistance des données&lt;/h3&gt;&lt;p&gt;Pour sauvegarder les données d’une partie à l’autre, ou même d’un démarrage d’application à l’autre. J’ai fait le choix le plus simple : le LocalStorage. Le seul hic avec le LocalStorage et les ChromeApps, c’est que l’API telle qu’elle est disponible en html5 n’existe pas sur une ChromeApp. En effet, l’api localStorage étant syncrhone, Google a préféré mettre en place une solution asyncrhone : &lt;a href=&quot;https://developer.chrome.com/apps/storage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.chrome.com/apps/storage&lt;/a&gt;. J’ai donc mis en place la solution de Google et j’en ai profité pour prévoir une api uniforme entre localstorage &amp;amp; chrome.storage au cas où vous partiriez sur une solution native html5.&lt;/p&gt;
&lt;h3 id=&quot;Placer-l’aduino&quot;&gt;&lt;a href=&quot;#Placer-l’aduino&quot; class=&quot;headerlink&quot; title=&quot;Placer l’aduino&quot;&gt;&lt;/a&gt;Placer l’aduino&lt;/h3&gt;&lt;p&gt;Afin de mesurer au mieux les données de distance, j’ai placé l’arduino au dos de l’utilisateur et j’ai fabriqué une petite boîte pour packager un peu tout ça :&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2015-10-Skiff/lego.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Annexes&quot;&gt;&lt;a href=&quot;#Annexes&quot; class=&quot;headerlink&quot; title=&quot;Annexes&quot;&gt;&lt;/a&gt;Annexes&lt;/h2&gt;&lt;p&gt;Le code complet est disponible &lt;a href=&quot;https://github.com/sqli-nantes/skiff-simulator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/sqli-nantes/skiff-simulator&lt;/a&gt;&lt;/p&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/assets/js_helper/jef-binomed-helper.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/assets/2015-10-Skiff/skiff-custo.js&quot;&gt;&lt;/script&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Connectez-votre-rameur-d’appartement-avec-Chrome&quot;&gt;&lt;a href=&quot;#Connectez-votre-rameur-d’appartement-avec-Chrome&quot; class=&quot;headerlink&quot; tit
    
    </summary>
    
      <category term="Tech" scheme="http://jef.binomed.fr/categories/Tech/"/>
    
    
      <category term="Arduino" scheme="http://jef.binomed.fr/tags/Arduino/"/>
    
      <category term="Canvas" scheme="http://jef.binomed.fr/tags/Canvas/"/>
    
      <category term="Chrome" scheme="http://jef.binomed.fr/tags/Chrome/"/>
    
      <category term="HTML5" scheme="http://jef.binomed.fr/tags/HTML5/"/>
    
      <category term="Jeux" scheme="http://jef.binomed.fr/tags/Jeux/"/>
    
  </entry>
  
  <entry>
    <title>Réalisez votre PortalGun avec WebRTC</title>
    <link href="http://jef.binomed.fr/2015/07/07/2015-07-07--Realisez-votre-PortalGun-avec-WebRTC/"/>
    <id>http://jef.binomed.fr/2015/07/07/2015-07-07--Realisez-votre-PortalGun-avec-WebRTC/</id>
    <published>2015-07-07T19:52:42.000Z</published>
    <updated>2015-12-11T15:05:57.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Realisez-votre-PortalGun-avec-WebRTC&quot;&gt;&lt;a href=&quot;#Realisez-votre-PortalGun-avec-WebRTC&quot; class=&quot;headerlink&quot; title=&quot;Réalisez votre PortalGun avec WebRTC&quot;&gt;&lt;/a&gt;Réalisez votre PortalGun avec WebRTC&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/assets/2015-07-PortalWebRTC/homer.png&quot; class=&quot;left homer&quot;&gt;&lt;/p&gt;
&lt;p&gt;Vous avez toujours rêvé d’avoir votre “Portal Gun”* afin de pouvoir imiter Homer Simpson et ainsi pouvoir attraper les bières de votre frigo depuis votre canapé.&lt;/p&gt;
&lt;p&gt;Et bien c’est dors et déjà possible ! Enfin presque… vous pourrez surveiller votre frigo mais vous ne pourrez pas attraper ces précieuses bières.&lt;/p&gt;
&lt;p&gt;Ce que je vous propose c’est de réaliser des Portails similaires au jeux Portal basés uniquement sur les technologies du Web ! &lt;/p&gt;
&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;Le-projet-Portal-WebRTC&quot;&gt;&lt;a href=&quot;#Le-projet-Portal-WebRTC&quot; class=&quot;headerlink&quot; title=&quot;Le projet Portal WebRTC&quot;&gt;&lt;/a&gt;Le projet Portal WebRTC&lt;/h2&gt;&lt;p&gt;Voici le rendu de ce qu’on allons réaliser : Le portail bleu voit ce qui se passe dans le portail orange et inversement :&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2015-07-PortalWebRTC/jf_0.png&quot; class=&quot;jf first&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2015-07-PortalWebRTC/jf_1.png&quot; class=&quot;jf&quot;&gt;&lt;/p&gt;
&lt;p&gt;Avant d’attaquer le code, regardons un peu de quoi nous avons besoin : &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Nous devons être capables de voir ce qu’il se passe de l’autre côté du portail&lt;/li&gt;
&lt;li&gt;Un “mur de flammes” entoure notre image&lt;/li&gt;
&lt;li&gt;Nous voulons nous télé-porter de l’autre côté du portail&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Voyons maintenant comment nous pouvons répondre à ces différents  besoins à travers des technologies du Web : &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;WebRTC :il s’agit d’une technologie de visio (mais pas que) et donc c’est idéal pour voir ce qu’il se passe à l’autre côté du portail&lt;/li&gt;
&lt;li&gt;Les canvas nous permettront de jouer efficacement pour simuler de façon performante notre “mur de flammes”.&lt;/li&gt;
&lt;li&gt;La teleportationAPI…. euh non rien ne permet de répondre à ce besoin… &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;/!\ Ce projet ne marchera que sous Chrome ou Firefox&lt;/p&gt;
&lt;h2 id=&quot;Architecture-du-projet&quot;&gt;&lt;a href=&quot;#Architecture-du-projet&quot; class=&quot;headerlink&quot; title=&quot;Architecture du projet&quot;&gt;&lt;/a&gt;Architecture du projet&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/assets/2015-07-PortalWebRTC/archi.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chaque ordinateur se trouve sur le réseau et se connecte à un serveur Web uniquement pour afficher le contenu de la page. Le serveur est un serveur NodeJS. &lt;/li&gt;
&lt;li&gt;Ce Serveur expose aussi une WebSocket dont le rôle sera expliqué plus tard dans l’article&lt;/li&gt;
&lt;li&gt;L’échange des données vidéos se fait en “direct” entre les 2 ordinateurs via la technologie WebRTC &lt;img src=&quot;/assets/2015-07-PortalWebRTC/logo_webrtc.png&quot; class=&quot;logo&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;WebRTC-What&quot;&gt;&lt;a href=&quot;#WebRTC-What&quot; class=&quot;headerlink&quot; title=&quot;WebRTC What ?&quot;&gt;&lt;/a&gt;WebRTC What ?&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/assets/2015-07-PortalWebRTC/meme_webrtc.png&quot; class=&quot;left meme&quot;&gt;&lt;/p&gt;
&lt;p&gt;WebRTC pour Real Time Communication est une des technologies les plus importantes du projet. Grâce à cette API, on peut  faire plusieurs choses :&lt;/p&gt;
&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Obtenir l’audio et la vidéo.&lt;/li&gt;
&lt;li&gt;Etablir une connexion entre 2 hôtes.&lt;/li&gt;
&lt;li&gt;Communiquer de la vidéo et de l’audio.&lt;/li&gt;
&lt;li&gt;Communiquer d’autres types de données.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Une des forces du webRTC est que les données s’échangent directement entre les 2 ordinateurs et que ces dernières ne passent pas par un serveur ! Pour réussir cet exploit, la technologie WebRTC repose sur 3 APIS web : &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;getUserMedia&lt;/strong&gt; : cette API permet de récupérer les flux vidéos et audios d’un ordinateur&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RTCPeerConnection&lt;/strong&gt; : cette API permet de faire communiquer des données entre 2 hôtes en tenant compte de tout un ensemble de contraintes telles que l’adresse IP d’une machine, ses codecs, sa connectivité, …&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RTCDataChannel&lt;/strong&gt; : cette API permet de faire transiter sur une RTCPeerConnection des données textuelles ou binaires.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pour notre projet, nous n’allons utiliser que les API getUserMedia et RTCPeerConnection.&lt;/p&gt;
&lt;h3 id=&quot;GetUserMedia&quot;&gt;&lt;a href=&quot;#GetUserMedia&quot; class=&quot;headerlink&quot; title=&quot;GetUserMedia&quot;&gt;&lt;/a&gt;GetUserMedia&lt;/h3&gt;&lt;p&gt;Il s’agit d’une API qui permet de récupérer un ensemble de stream de médias syncrhonisés. Chaque stream peut être vidéo / audio.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; constraints = &amp;#123;video: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;successCallback&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;stream&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; video = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&quot;video&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  video.src = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.URL.createObjectURL(stream);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;errorCallback&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;navigator.getUserMedia error: &quot;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;navigator.getUserMedia(constraints, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      successCallback, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      errorCallback);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Dans l’exemple ci dessus, nous ne récupérons que la vidéo et nous injectons le résultat de l’appel de getUserMedia dans une balise vidéo.&lt;/p&gt;
&lt;h3 id=&quot;RTCPeerConnection&quot;&gt;&lt;a href=&quot;#RTCPeerConnection&quot; class=&quot;headerlink&quot; title=&quot;RTCPeerConnection&quot;&gt;&lt;/a&gt;RTCPeerConnection&lt;/h3&gt;&lt;p&gt;La RTCPeerConnection permet de gérer le transport des données. Pour initialiser une RTCPeerConnection, on répond au principe de l’offre et de la demande. Il y a d’une part, une notion d’offre et de demande pour communiquer mais aussi une notion de chemin à emprunter ! Ces 2 notions s’appellent le “Signaling”. Le Signaling a pour objectif de répondre à ces questions : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quel type de média et format je supporte ?&lt;/li&gt;
&lt;li&gt;Que puis-je envoyer ?&lt;/li&gt;
&lt;li&gt;Quel est mon type d’infrastructure réseau ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pour faire cette étape, il suffit juste de trouver un moyen de passer ces informations à l’hôte distant. Une des technologies préconisées pour faire le signaling est “les WebSockets”. C’est donc ici qu’interviendra notre serveur de websockets&lt;/p&gt;
&lt;p&gt;Voici comment se déroule le signaling : &lt;/p&gt;
&lt;h4 id=&quot;Gestion-de-l’offre&quot;&gt;&lt;a href=&quot;#Gestion-de-l’offre&quot; class=&quot;headerlink&quot; title=&quot;Gestion de l’offre&quot;&gt;&lt;/a&gt;Gestion de l’offre&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Alice appelle la méthode &lt;strong&gt;createOffer()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Dans le callback, Alice appelle &lt;strong&gt;setLocalDesctiption()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Alice &lt;strong&gt;sérialise l’offre&lt;/strong&gt; et l’envoie à Eve&lt;/li&gt;
&lt;li&gt;Eve appelle la méthode &lt;strong&gt;setRemoteDescription()&lt;/strong&gt; avec l’offre&lt;/li&gt;
&lt;li&gt;Eve appelle la méthode &lt;strong&gt;createAnswer()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Eve appelle la méthode &lt;strong&gt;setLocalDescription()&lt;/strong&gt; avec la réponse envoyée à Alice&lt;/li&gt;
&lt;li&gt;Alice reçoit la réponse et appelle &lt;strong&gt;setRemoteDescription()&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Gestion-du-chemin-Ice-Candidate-ICE-pour-Interactive-Connectivity-Establishement&quot;&gt;&lt;a href=&quot;#Gestion-du-chemin-Ice-Candidate-ICE-pour-Interactive-Connectivity-Establishement&quot; class=&quot;headerlink&quot; title=&quot;Gestion du chemin Ice Candidate (ICE pour Interactive Connectivity Establishement)&quot;&gt;&lt;/a&gt;Gestion du chemin Ice Candidate (ICE pour Interactive Connectivity Establishement)&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Alice &amp;amp; Eve ont leur &lt;strong&gt;RTCPeerConnection&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;En cas de succès de chaque côté les &lt;strong&gt;IceCanditates&lt;/strong&gt; sont envoyées&lt;/li&gt;
&lt;li&gt;Alice &lt;strong&gt;sérialise&lt;/strong&gt; ses IceCandidates et les envoie à Eve&lt;/li&gt;
&lt;li&gt;Eve reçoit les IceCandidates d’Alice et appelle &lt;strong&gt;addIceCandidate()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Eve &lt;strong&gt;sérialise&lt;/strong&gt; ses IceCandidates et les envoie à Alice&lt;/li&gt;
&lt;li&gt;Alice reçoit les IceCandidates d’Eve et appelle &lt;strong&gt;addIceCandidate()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Les 2 savent comment communiquer.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Plus-d’infos&quot;&gt;&lt;a href=&quot;#Plus-d’infos&quot; class=&quot;headerlink&quot; title=&quot;Plus d’infos&quot;&gt;&lt;/a&gt;Plus d’infos&lt;/h4&gt;&lt;p&gt;Si vous souhaitez plus d’information sur le WebRTC : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webrtc/basics/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.html5rocks.com/en/tutorials/webrtc/basics/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webrtc/datachannels/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.html5rocks.com/en/tutorials/webrtc/datachannels/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Retour-au-Projet-Portal&quot;&gt;&lt;a href=&quot;#Retour-au-Projet-Portal&quot; class=&quot;headerlink&quot; title=&quot;Retour au Projet Portal&quot;&gt;&lt;/a&gt;Retour au Projet Portal&lt;/h2&gt;&lt;p&gt;Après cette rapide introduction sur la technologie WebRTC. Nous allons maintenant nous intéresser à notre projet et nous allons voir comment réaliser notre “Portal”. &lt;/p&gt;
&lt;p&gt;Comme tout bon projet, je me suis inspiré de ce que je trouvais sur le net afin de gagner du temps. Ainsi, plutôt que de vous noyer sous des montagnes de code compréhensible et/ou incompréhensible. Je vous donnerais plutôt les deltas que j’ai effectué et pourquoi je les ai fait.&lt;/p&gt;
&lt;h3 id=&quot;Etape-1-cloner-les-projets-references&quot;&gt;&lt;a href=&quot;#Etape-1-cloner-les-projets-references&quot; class=&quot;headerlink&quot; title=&quot;Etape 1 : cloner les projets références&quot;&gt;&lt;/a&gt;Etape 1 : cloner les projets références&lt;/h3&gt;&lt;p&gt;La base du projet WebRTC repose sur le codelab initialisé par Sam Dutton : ingénieur chez Google et travaillant sur l’implémentation de WebRTC dans Chrome : &lt;a href=&quot;https://bitbucket.org/webrtc/codelab&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://bitbucket.org/webrtc/codelab&lt;/a&gt;. De façon plus précise notre point de départ sera le step7 de ce codelab.&lt;/p&gt;
&lt;p&gt;La base graphique des flammes repose sur le projet de Chris Longo :  &lt;a href=&quot;https://github.com/chrislongo/html5-canvas-demo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/chrislongo/html5-canvas-demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nous allons donc commencer par cloner les 2 projets afin de récupérer une base de code propre et fonctionnelle que nous allons nettoyer petit à petit pour coller avec notre besoin.&lt;/p&gt;
&lt;h3 id=&quot;Etape-2-creation-du-squelette-de-l’application&quot;&gt;&lt;a href=&quot;#Etape-2-creation-du-squelette-de-l’application&quot; class=&quot;headerlink&quot; title=&quot;Etape 2 : création du squelette de l’application&quot;&gt;&lt;/a&gt;Etape 2 : création du squelette de l’application&lt;/h3&gt;&lt;p&gt;L’application est structurée comme suit : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;assets/ : fichiers externes&lt;ul&gt;
&lt;li&gt;fonts/ : les fonts spéciales utilisées pour le projet&lt;/li&gt;
&lt;li&gt;images/ : les ressources graphiques utilisées pour le projet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;css/ : le style de notre page&lt;/li&gt;
&lt;li&gt;js/ : les fichiers javascripts utilisés par le projet&lt;/li&gt;
&lt;li&gt;package.json : fichier des dépendances node utilisées pour le serveur node&lt;/li&gt;
&lt;li&gt;server.js : le serveur nodeJS&lt;/li&gt;
&lt;li&gt;index.html : notre application&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Téléchargement des ressources annexes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vous trouverez la font ici : &lt;a href=&quot;http://fontmeme.com/freefonts/34868/portal.font&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://fontmeme.com/freefonts/34868/portal.font&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Les images utilisées dans le projet sont disponible aux urls suivantes : &lt;ul&gt;
&lt;li&gt;Image du BugDroid Portal : &lt;a href=&quot;https://goo.gl/vT6svL&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://goo.gl/vT6svL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Image du footer : &lt;a href=&quot;https://goo.gl/J6CknB&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://goo.gl/J6CknB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Image du header : &lt;a href=&quot;https://goo.gl/AQnIoo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://goo.gl/AQnIoo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Image du logo WebRTC : &lt;a href=&quot;https://goo.gl/XeimoA&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://goo.gl/XeimoA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Etape-3-Ecriture-du-Serveur&quot;&gt;&lt;a href=&quot;#Etape-3-Ecriture-du-Serveur&quot; class=&quot;headerlink&quot; title=&quot;Etape 3 : Ecriture du Serveur&quot;&gt;&lt;/a&gt;Etape 3 : Ecriture du Serveur&lt;/h3&gt;&lt;p&gt;Comme expliqué précédemment, nous allons baser notre travail sur le step7 du codelab. &lt;/p&gt;
&lt;h4 id=&quot;package-json&quot;&gt;&lt;a href=&quot;#package-json&quot; class=&quot;headerlink&quot; title=&quot;./package.json&quot;&gt;&lt;/a&gt;./package.json&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;author&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;jefBinomed&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;protal-devfest-2013&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;socket.io&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~0.9.14&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;node-static&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;~0.6.9&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;server-js&quot;&gt;&lt;a href=&quot;#server-js&quot; class=&quot;headerlink&quot; title=&quot;./server.js&quot;&gt;&lt;/a&gt;./server.js&lt;/h4&gt;&lt;p&gt;Nous reprenons le serveur tel qu’il est dans le codelab&lt;/p&gt;
&lt;p&gt;Ce serveur fait donc 2 choses : &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Dans un premier temps, on va définir un serveur http pour servir notre contenu html&lt;/li&gt;
&lt;li&gt;On créé un serveur de webSockets afin d’assurer la partie “Signaling”.  Un message transféré au serveur sera automatiquement partagé à l’autre client.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Il ne nous reste plus à qu’à récupérer les modules node avec l’instruction : &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;De cette manière, les dépendances nodes seront téléchargées dans notre projet&lt;/p&gt;
&lt;h3 id=&quot;Etape-4-Ecriture-du-projet-WebRTC&quot;&gt;&lt;a href=&quot;#Etape-4-Ecriture-du-projet-WebRTC&quot; class=&quot;headerlink&quot; title=&quot;Etape 4 : Ecriture du projet WebRTC&quot;&gt;&lt;/a&gt;Etape 4 : Ecriture du projet WebRTC&lt;/h3&gt;&lt;p&gt;Nous allons poser le style graphique de notre application : &lt;/p&gt;
&lt;h4 id=&quot;assets-fonts-stylesheet-css&quot;&gt;&lt;a href=&quot;#assets-fonts-stylesheet-css&quot; class=&quot;headerlink&quot; title=&quot;./assets/fonts/stylesheet.css&quot;&gt;&lt;/a&gt;./assets/fonts/stylesheet.css&lt;/h4&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;font-face&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;&#39;portalportal&#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;portal.ttf&#39;&lt;/span&gt;) &lt;span class=&quot;function&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;truetype&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-weight&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; normal&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-style&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; normal&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;css-main-css&quot;&gt;&lt;a href=&quot;#css-main-css&quot; class=&quot;headerlink&quot; title=&quot;./css/main.css&quot;&gt;&lt;/a&gt;./css/main.css&lt;/h4&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;black&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;&quot;portalportal&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; center&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#636468&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;overflow&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; hidden&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;id&quot;&gt;#videos&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; auto&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; absolute&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;342px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;40px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-image&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;url&lt;/span&gt;(../assets/images/navigation_bg.png)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-repeat&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; no-repeat&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-size&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;750px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;147px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;750px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.landscape&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;-&lt;span class=&quot;number&quot;&gt;325px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;inherit&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;.textHeader&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; absolute&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;calc&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;40px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;right&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;calc&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; right&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;.firstLine&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;text-transform&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; uppercase&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;.secondLine&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;.portalImg&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; absolute&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;right&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;calc&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;60px&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;40px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;id&quot;&gt;#container&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; absolute&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;137px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;99%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;calc&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;60px&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;137px&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;footer&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-image&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;url&lt;/span&gt;(../assets/images/showcase_bg.png)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-repeat&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; no-repeat&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-size&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;750px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; absolute&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;bottom&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;right&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;345px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;750px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;14px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;60px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;60px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.landscape&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;footer&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;right&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; inherit&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;325px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;bottom&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; absolute&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;index-html&quot;&gt;&lt;a href=&quot;#index-html&quot; class=&quot;headerlink&quot; title=&quot;index.html&quot;&gt;&lt;/a&gt;index.html&lt;/h4&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Server presentation&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Main Css--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;assets/fonts/stylesheet.css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;css/main.css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;landscape&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;textHeader&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;firstLine&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Projet PORTAL 2O15&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;secondLine&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;une expérience interactive&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;img&lt;/span&gt;  &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;assets/images/bugdroidportal_2.png&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;100px&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;portalImg&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;img&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;container&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;video&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;remoteVideo&#39;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;autoplay&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;muted&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;display:none;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;canvasFireLocalVideo&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;canvasRemoteVideo&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Une création utilisant la technologie &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;www.webrtc.org&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;WEBRTC&amp;amp;nbsp;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;32px&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;assets/images/webrtc.png&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;. Credits to @Binomed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;/socket.io/socket.io.js&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;js/lib/adapter.js&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;js/canvasFire.js&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;js/app.js&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;js-lib-adapter-js&quot;&gt;&lt;a href=&quot;#js-lib-adapter-js&quot; class=&quot;headerlink&quot; title=&quot;./js/lib/adapter.js&quot;&gt;&lt;/a&gt;./js/lib/adapter.js&lt;/h4&gt;&lt;p&gt;Ce fichier doit être copié tel quel depuis le codelab car il s’agit de la classe Polyfill qui permet d’uniformiser l’API WebRTC entre Chrome &amp;amp; Firefox&lt;/p&gt;
&lt;h4 id=&quot;js-canvasFire-js&quot;&gt;&lt;a href=&quot;#js-canvasFire-js&quot; class=&quot;headerlink&quot; title=&quot;./js/canvasFire.js&quot;&gt;&lt;/a&gt;./js/canvasFire.js&lt;/h4&gt;&lt;p&gt;Initialiser ce fichier à vide afin d’avoir l’import depuis le fichier html qui fonctionne&lt;/p&gt;
&lt;h4 id=&quot;js-app-js&quot;&gt;&lt;a href=&quot;#js-app-js&quot; class=&quot;headerlink&quot; title=&quot;./js/app.js&quot;&gt;&lt;/a&gt;./js/app.js&lt;/h4&gt;&lt;p&gt;Nous allons partir du fichier issu du step7 : ./js/main.js. &lt;/p&gt;
&lt;p&gt;Copiez l’intégralité du fichier et nous allons retirer ce qui ne nous intéresse pas.&lt;/p&gt;
&lt;h5 id=&quot;LocalVideo&quot;&gt;&lt;a href=&quot;#LocalVideo&quot; class=&quot;headerlink&quot; title=&quot;LocalVideo&quot;&gt;&lt;/a&gt;LocalVideo&lt;/h5&gt;&lt;p&gt;Dans notre projet, nous ne sommes pas intéressé pour afficher le retour de notre webCam à l’écran, nous allons donc supprimer toutes les références à cet élément.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; localVideo = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;#localVideo&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;et &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;attachMediaStream(localVideo, stream);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;dans la fonction handleUserMedia(stream)&lt;/p&gt;
&lt;h5 id=&quot;DataChannel&quot;&gt;&lt;a href=&quot;#DataChannel&quot; class=&quot;headerlink&quot; title=&quot;DataChannel&quot;&gt;&lt;/a&gt;DataChannel&lt;/h5&gt;&lt;p&gt;De la même façon tout ce qui concerne le DataChannel ne nous sert pas&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sendChannel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sendButton = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;sendButton&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sendTextarea = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;dataChannelSend&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; receiveTextarea = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;dataChannelReceive&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sendButton.onclick = sendData;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Au début du projet. Ensuite &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pc_constraints = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;optional&#39;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;DtlsSrtpKeyAgreement&#39;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;RtpDataChannels&#39;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ]&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;est à remplacer par :&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pc_constraints = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;optional&#39;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;DtlsSrtpKeyAgreement&#39;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ]&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Et aussi il faut supprimer tout ce qui suit qui se situe au niveau de la fonction createPeerConnection&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isInitiator) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Reliable Data Channels not yet supported in Chrome&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      sendChannel = pc.createDataChannel(&lt;span class=&quot;string&quot;&gt;&quot;sendDataChannel&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;reliable: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      sendChannel.onmessage = handleMessage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      trace(&lt;span class=&quot;string&quot;&gt;&#39;Created send data channel&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      alert(&lt;span class=&quot;string&quot;&gt;&#39;Failed to create data channel. &#39;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;You need Chrome M25 or later with RtpDataChannel enabled&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      trace(&lt;span class=&quot;string&quot;&gt;&#39;createDataChannel() failed with exception: &#39;&lt;/span&gt; + e.message);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sendChannel.onopen = handleSendChannelStateChange;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sendChannel.onclose = handleSendChannelStateChange;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pc.ondatachannel = gotReceiveChannel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sendData&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = sendTextarea.value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sendChannel.send(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  trace(&lt;span class=&quot;string&quot;&gt;&#39;Sent data: &#39;&lt;/span&gt; + data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;gotReceiveChannel&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  trace(&lt;span class=&quot;string&quot;&gt;&#39;Receive Channel Callback&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sendChannel = event.channel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sendChannel.onmessage = handleMessage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sendChannel.onopen = handleReceiveChannelStateChange;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sendChannel.onclose = handleReceiveChannelStateChange;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleMessage&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  trace(&lt;span class=&quot;string&quot;&gt;&#39;Received message: &#39;&lt;/span&gt; + event.data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  receiveTextarea.value = event.data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleSendChannelStateChange&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; readyState = sendChannel.readyState;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  trace(&lt;span class=&quot;string&quot;&gt;&#39;Send channel state is: &#39;&lt;/span&gt; + readyState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  enableMessageInterface(readyState == &lt;span class=&quot;string&quot;&gt;&quot;open&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleReceiveChannelStateChange&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; readyState = sendChannel.readyState;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  trace(&lt;span class=&quot;string&quot;&gt;&#39;Receive channel state is: &#39;&lt;/span&gt; + readyState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  enableMessageInterface(readyState == &lt;span class=&quot;string&quot;&gt;&quot;open&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;enableMessageInterface&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;shouldEnable&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (shouldEnable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dataChannelSend.disabled = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dataChannelSend.focus();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dataChannelSend.placeholder = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sendButton.disabled = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dataChannelSend.disabled = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sendButton.disabled = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Et enfin pour finir&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; constraints = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;optional&#39;&lt;/span&gt;: [], &lt;span class=&quot;string&quot;&gt;&#39;mandatory&#39;&lt;/span&gt;: &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;MozDontOfferDataChannel&#39;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;de la fonction doCall() est à remplacer par : &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; constraints = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;optional&#39;&lt;/span&gt;: [], &lt;span class=&quot;string&quot;&gt;&#39;mandatory&#39;&lt;/span&gt;: &amp;#123;&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Tester&quot;&gt;&lt;a href=&quot;#Tester&quot; class=&quot;headerlink&quot; title=&quot;Tester&quot;&gt;&lt;/a&gt;Tester&lt;/h4&gt;&lt;p&gt;Nous pouvons à présent tester notre application pour vérifier que la vidéo passe bien à travers l’API WebRTC. Pour ce faire, il suffit simplement de lancer notre serveur à l’aide de la commande : &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node server.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Notre serveur tourne sur le port 2013. Il faut donc entrer dans notre navigateur l’url : &lt;a href=&quot;http://localhost:2013&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:2013&lt;/a&gt;. Il est très important d’accepter le partage de vidéo sinon cela ne pourra pas fonctionner.&lt;/p&gt;
&lt;p&gt;A ce moment là, vous devriez avoir un écran noir. En effet, comme nous ne faisons pas de retour visuel de notre propre caméra, nous devons ouvrir un deuxième onglet sur la même url pour vérifier le bon fonctionnement. Cependant, il y a une deuxième raison pour laquelle nous ne voyons rien, la balise video remoteVideo a un style ‘display:none’. Il faudra supprimer ce display: none le temps du test.&lt;br&gt;Si tout se passe bien, vous devriez avoir une vidéo sur les 2 onglets correspondant au rendu de votre webcam. Pour chaque tests futurs, je vous conseille de fermer les 2 onglets à chaque fois car le serveur Node stocke le nombre de clients connectés et la limite a été fixée à 2 clients maximum !&lt;/p&gt;
&lt;h3 id=&quot;Etape-5-Ajout-du-mur-de-flammes&quot;&gt;&lt;a href=&quot;#Etape-5-Ajout-du-mur-de-flammes&quot; class=&quot;headerlink&quot; title=&quot;Etape 5 : Ajout du mur de flammes&quot;&gt;&lt;/a&gt;Etape 5 : Ajout du mur de flammes&lt;/h3&gt;&lt;p&gt;Maintenant que nous nous sommes occupés de la partie WebRTC, nous allons ajouter un peu de graphisme à tout ça. Pour le moment, notre flux WebRTC arrive directement dans une balise vidéo, mais il se trouve que les canvas et les vidéos marchent très bien ensemble !  En effet, nous allons faire des snapshots de notre balise vidéo que nous allons injecter dans un canvas et ainsi pouvoir commencer à jouer plus sérieusement avec des effets graphiques.&lt;/p&gt;
&lt;p&gt;Nous allons donc avoir &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 balise vidéo en “display:none”&lt;/li&gt;
&lt;li&gt;1 canvas restituant la vidéo mais avec un masque&lt;/li&gt;
&lt;li&gt;1 canvas affichant le mur de flamme.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;display-none&quot;&gt;&lt;a href=&quot;#display-none&quot; class=&quot;headerlink&quot; title=&quot;display:none&quot;&gt;&lt;/a&gt;display:none&lt;/h4&gt;&lt;p&gt;Pour ce faire, il suffit simplement de faire en sorte que dans notre html, nous ayons le code suivant : &lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;video&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;remoteVideo&#39;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;autoplay&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;muted&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;display:none;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;canvas-avec-la-video&quot;&gt;&lt;a href=&quot;#canvas-avec-la-video&quot; class=&quot;headerlink&quot; title=&quot;canvas avec la vidéo&quot;&gt;&lt;/a&gt;canvas avec la vidéo&lt;/h4&gt;&lt;p&gt;Nous allons maintenant ajouter à notre application (app.js) l’affichage du canvas qui recevra la vidéo.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; canvasRemoteElement = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;#canvasRemoteVideo&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ctxRemote = canvasRemoteElement.getContext(&lt;span class=&quot;string&quot;&gt;&#39;2d&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;snapshot&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; canvasToUse = canvasRemoteElement;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; contextToUse = ctxRemote;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; videoToUse = remoteVideo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvasRemoteElement.width = remoteVideo.videoWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvasRemoteElement.height = remoteVideo.videoHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (remoteStream)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ctxRemote.drawImage(remoteVideo, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.requestAnimationFrame(snapshot);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;snapshot();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Nous utilisons simplement la possibilité de dessiner dans un canvas une image d’une vidéo&lt;/p&gt;
&lt;h4 id=&quot;Mur-de-flamme&quot;&gt;&lt;a href=&quot;#Mur-de-flamme&quot; class=&quot;headerlink&quot; title=&quot;Mur de flamme&quot;&gt;&lt;/a&gt;Mur de flamme&lt;/h4&gt;&lt;p&gt;Vous devez copier le contenu du fichier canvas.js du projet html5-canvas-demo dans notre fichier ./js/canvasFire.js&lt;/p&gt;
&lt;p&gt;Nous allons maintenant afficher le mur dans un canvas. Nous devons donc éditer notre fichier app.js&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; canvasFireElement = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;#canvasFireLocalVideo&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ctxFire = canvasFireElement.getContext(&lt;span class=&quot;string&quot;&gt;&#39;2d&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Nous allons aussi modifier la méthode snapshot afin d’y intégrer toute la partie flammes&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; init = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;snapshot&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; canvasToUse = canvasRemoteElement;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; contextToUse = ctxRemote;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; videoToUse = remoteVideo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvasRemoteElement.width = remoteVideo.videoWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvasRemoteElement.height = remoteVideo.videoHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (remoteStream)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ctxRemote.drawImage(remoteVideo, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; idealWidth = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.min(canvasToUse.parentElement.clientWidth, videoToUse.videoWidth + &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; minVideoWidth = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.min(canvasToUse.parentElement.clientWidth - &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;, videoToUse.videoWidth);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ratio = videoToUse.videoWidth / videoToUse.videoHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; idealHeight = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.min(idealWidth / ratio, videoToUse.videoHeight);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; useVideoWidth = idealWidth === videoToUse.videoWidth + &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvasToUse.width = idealWidth; &lt;span class=&quot;comment&quot;&gt;//landscapeMode ? idealHeight : idealWidth;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvasToUse.height = canvasToUse.width;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvasToUse.style.top = ((canvasToUse.parentElement.clientHeight - canvasToUse.height) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)+&lt;span class=&quot;string&quot;&gt;&quot;px&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvasToUse.style.left = ((canvasToUse.parentElement.clientWidth - canvasToUse.width) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)+&lt;span class=&quot;string&quot;&gt;&quot;px&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvasFireElement.width = idealWidth;&lt;span class=&quot;comment&quot;&gt;// landscapeMode ? idealHeight : idealWidth;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvasFireElement.height = canvasFireElement.width;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvasFireElement.style.top = ((canvasToUse.parentElement.clientHeight - canvasFireElement.height) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)+&lt;span class=&quot;string&quot;&gt;&quot;px&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvasFireElement.style.left = ((canvasToUse.parentElement.clientWidth - canvasFireElement.width) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)+&lt;span class=&quot;string&quot;&gt;&quot;px&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; refValue = idealWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (localStream)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!init &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;amp;&amp;amp; canvasToUse.width == &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.round(refValue)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;amp;&amp;amp; canvasToUse.height == &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.round(refValue)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;amp;&amp;amp; canvasFireElement.width == &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.round(refValue)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;amp;&amp;amp; canvasFireElement.height == &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.round(refValue))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (canvasFireElement.width != &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          init = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          canvasDemo.canvas = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;canvasFireLocalVideo&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          canvasDemo.init();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (init)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        canvasDemo.refresh();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.requestAnimationFrame(snapshot);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Le code ajouté nous permet d’initialiser graphiquement le canvas et de demander de piloter les rafraîchissements du mur de flammes à partir de notre application. Nous allons donc devoir faire une modification dans le fichier canvasFire.js : Nous ajoutons une méthode rafraîchissement et nous supprimons l’appel au requestAnimationFrame : &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.refresh = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    update();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// main render loop&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; update = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    smooth();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    draw();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    frames++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//requestAnimFrame(function() &amp;#123; update(); &amp;#125;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Etape-6-Ajouter-un-cercle-de-feux&quot;&gt;&lt;a href=&quot;#Etape-6-Ajouter-un-cercle-de-feux&quot; class=&quot;headerlink&quot; title=&quot;Etape 6 : Ajouter un cercle de feux&quot;&gt;&lt;/a&gt;Etape 6 : Ajouter un cercle de feux&lt;/h3&gt;&lt;h4 id=&quot;Principe&quot;&gt;&lt;a href=&quot;#Principe&quot; class=&quot;headerlink&quot; title=&quot;Principe&quot;&gt;&lt;/a&gt;Principe&lt;/h4&gt;&lt;p&gt;Le principe pour le mur de flamme est simple : Le projet html5-canvas-demo nous fournit un seul mur de flammes, hors nous, nous voulons 1 cercle. Nous allons nous y prendre en plusieurs étapes. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Nous allons créer un mur de flammes sur chacun des axes cardinaux. De cette façon nous aurons des flammes partout autour de notre image&lt;/li&gt;
&lt;li&gt;Nous allons ensuite mettre en place un masque ovale afin de restreindre la zone affichant les flammes&lt;/li&gt;
&lt;li&gt;Nous allons faire tourner ces flammes pour leur donner plus de mouvement et se rapprocher du rendu du jeu Portal.&lt;/li&gt;
&lt;li&gt;Enfin, nous allons autoriser une deuxième couleur car chaque portail possède sa propre couleur (bleu et orange)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pour rappel, le projet initial fonctionne de la façon suivante : A chaque fois qu’il peut dessiner (window.requestAnimationFrame), on dessine une image de particules de flammes avec la méthode drawImage du context du canvas.&lt;/p&gt;
&lt;h4 id=&quot;Flammes-selon-les-axes-cardinaux&quot;&gt;&lt;a href=&quot;#Flammes-selon-les-axes-cardinaux&quot; class=&quot;headerlink&quot; title=&quot;Flammes selon les axes cardinaux&quot;&gt;&lt;/a&gt;Flammes selon les axes cardinaux&lt;/h4&gt;&lt;p&gt;Afin d’afficher les flammes selon les axes nous allons créer une fonction qui nous permet d’afficher pour un angle donné une image de flamme dans le fichier canvasFire.js.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; drawAngle = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;angleDegree&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; rad = angleDegree * &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI / &lt;span class=&quot;number&quot;&gt;180&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fullWidth = width * scale;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fullHeight = height * scale;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        context.translate(fullWidth / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, fullHeight / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        context.rotate(rad);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        context.translate(-fullWidth / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, -fullHeight / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; trY = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.abs(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.cos(rad))*((fullHeight - dims.height) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        context.translate(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,-trY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        context.drawImage(buffer, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, width * scale, height * scale);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// On doit revenir en arriere sur le mouvement pour traiter un nouvel angle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        context.translate(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,trY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        context.translate(fullWidth / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, fullHeight / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        context.rotate(-rad);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        context.translate(-fullWidth / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, -fullHeight / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Cette méthode fait donc une rotation du context du canvas avant de dessiner la flamme. Une des choses importante dans cette méthode est le retour à la position initiale !  C’est très important pour pouvoir traiter un nouvel angle ! &lt;/p&gt;
&lt;p&gt;Nous devons maintenant appeler cette méthode là où le drawImage d’origine était effectué à savoir dans la méthode “draw”. Le contenu de cette fonction sera donc maintenant le suivant : &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// draw colormap-&amp;gt;palette values to screen&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; draw = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// render the image data to the offscreen buffer...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bufferContext.putImageData(imageData, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...then draw it to scale to the onscreen canvas&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Image de base en bas !&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    drawAngle(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    drawAngle(&lt;span class=&quot;number&quot;&gt;90&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    drawAngle(&lt;span class=&quot;number&quot;&gt;180&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    drawAngle(&lt;span class=&quot;number&quot;&gt;270&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Il faut aussi ajouter les dimensions de l’image destination afin de calculer les bons angles.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dims = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.canvas = &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.init = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;dim&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    context = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.canvas.getContext(&lt;span class=&quot;string&quot;&gt;&#39;2d&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.round(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.canvas.width / scale);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.round(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.canvas.height / scale);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dim)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dims = dim;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dims = &amp;#123;width: width, height : height&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    colorMap = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(width * height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; colorMap.length; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        colorMap[i] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    initPalette();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    initBuffer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    update();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Il faut enfin modifier la façon d’afficher les pixels afin de forcer un affichage de pixels transparents ! En effet, actuellement seul le dernier canvas est affiché. Il faut donc modifier la fonction drawPixel comme suit : &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// set pixels in imageData&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; drawPixel = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x, y, color&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; offset = (x + y * imageData.width) * &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    imageData.data[offset] = color[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    imageData.data[offset + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = color[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    imageData.data[offset + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] = color[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (color[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &amp;lt;= &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; &amp;amp;&amp;amp; color[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; color[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] &amp;lt;= &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        imageData.data[offset + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        imageData.data[offset + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Comme nous avons changé la méthode init de canvasFire.js. Nous devons donc changer l’appel à cette méthode dans app.js. Ainsi dans la méthode snapshot, il faut remplacer : &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;canvasDemo.init();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;par &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;canvasDemo.init(&amp;#123;width :minVideoWidth, height : idealHeight + &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;On constate qu’on va bien afficher 4 murs de flammes autour de notre vidéo&lt;/p&gt;
&lt;h4 id=&quot;Mise-en-place-des-masques&quot;&gt;&lt;a href=&quot;#Mise-en-place-des-masques&quot; class=&quot;headerlink&quot; title=&quot;Mise en place des masques&quot;&gt;&lt;/a&gt;Mise en place des masques&lt;/h4&gt;&lt;p&gt;Dans l’application finale, la vidéo et les flammes sont dans un ovale. Nous allons utiliser pour ce faire une fonction des canvas : clip. Cette dernière nous permettra de définir une zone ovale dans le canvas et nous y dessinerons notre vidéo et nos flammes. Plus précisément, nous allons dessiner un ovale de flammes et par dessus, nous dessinerons un ovale contenant l’image de la vidéo. Voici donc la version presque finale de la méthode snaphot dans le fichier app.js&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;snapshot&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; canvasToUse = canvasRemoteElement;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; contextToUse = ctxRemote;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; videoToUse = remoteVideo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvasRemoteElement.width = remoteVideo.videoWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvasRemoteElement.height = remoteVideo.videoHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (remoteStream)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ctxRemote.drawImage(remoteVideo, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; delta = &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; idealWidth = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.min(canvasToUse.parentElement.clientWidth, videoToUse.videoWidth + &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; minVideoWidth = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.min(canvasToUse.parentElement.clientWidth - &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;, videoToUse.videoWidth);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ratio = videoToUse.videoWidth / videoToUse.videoHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; idealHeight = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.min(idealWidth / ratio, videoToUse.videoHeight);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; useVideoWidth = idealWidth === videoToUse.videoWidth + &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvasToUse.width = idealWidth; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvasToUse.height = canvasToUse.width;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvasToUse.style.top = ((canvasToUse.parentElement.clientHeight - canvasToUse.height) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)+&lt;span class=&quot;string&quot;&gt;&quot;px&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvasToUse.style.left = ((canvasToUse.parentElement.clientWidth - canvasToUse.width) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)+&lt;span class=&quot;string&quot;&gt;&quot;px&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvasFireElement.width = idealWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvasFireElement.height = canvasFireElement.width;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvasFireElement.style.top = ((canvasToUse.parentElement.clientHeight - canvasFireElement.height) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)+&lt;span class=&quot;string&quot;&gt;&quot;px&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvasFireElement.style.left = ((canvasToUse.parentElement.clientWidth - canvasFireElement.width) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)+&lt;span class=&quot;string&quot;&gt;&quot;px&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; refValue = idealWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (localStream)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!init &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;amp;&amp;amp; canvasToUse.width == &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.round(refValue)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;amp;&amp;amp; canvasToUse.height == &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.round(refValue)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;amp;&amp;amp; canvasFireElement.width == &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.round(refValue)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;amp;&amp;amp; canvasFireElement.height == &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.round(refValue))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (canvasFireElement.width != &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          init = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          canvasDemo.canvas = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;canvasFireLocalVideo&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          canvasDemo.init(&amp;#123;width :minVideoWidth, height : idealHeight + &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; deltaX = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, deltaY = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ctxFire.save();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ctxFire.beginPath();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      deltaX =  (canvasFireElement.width - minVideoWidth) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      deltaY =  (canvasFireElement.height- idealHeight) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ctxFire.fillStyle = &lt;span class=&quot;string&quot;&gt;&quot;rgba(0, 0, 0, 0)&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      drawEllipse(ctxFire, deltaX, deltaY, minVideoWidth, idealHeight);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Clip to the current path&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ctxFire.clip(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Undo the clipping&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (init)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        canvasDemo.refresh();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ctxFire.restore();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Save the state, so we can undo the clipping&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      contextToUse.save();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      contextToUse.beginPath();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      deltaX =  (canvasToUse.width - minVideoWidth +delta) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      deltaY =  (canvasToUse.height - idealHeight+delta) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      contextToUse.fillStyle = &lt;span class=&quot;string&quot;&gt;&quot;rgba(0, 0, 0, 0)&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      drawEllipse(contextToUse, deltaX , deltaY, minVideoWidth-delta , idealHeight-delta);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Clip to the current path&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      contextToUse.clip();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      contextToUse.drawImage(videoToUse,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, videoToUse.videoWidth, videoToUse.videoHeight, deltaX, deltaY, minVideoWidth, idealHeight);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Undo the clipping&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      contextToUse.restore();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.requestAnimationFrame(snapshot);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;et il faut donc ajouter la fonction &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;drawEllipse&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;ctx, x, y, w, h&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; kappa = &lt;span class=&quot;number&quot;&gt;.5522848&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ox = (w / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) * kappa, &lt;span class=&quot;comment&quot;&gt;// control point offset horizontal&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      oy = (h / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) * kappa, &lt;span class=&quot;comment&quot;&gt;// control point offset vertical&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      xe = x + w,           &lt;span class=&quot;comment&quot;&gt;// x-end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ye = y + h,           &lt;span class=&quot;comment&quot;&gt;// y-end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      xm = x + w / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,       &lt;span class=&quot;comment&quot;&gt;// x-middle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ym = y + h / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;       &lt;span class=&quot;comment&quot;&gt;// y-middle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ctx.beginPath();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ctx.moveTo(x, ym);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ctx.closePath();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ctx.stroke();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;On peut donc voir que l’on dessine des Ellipses dans lesquelles nous faisons nos affichages de flammes suivit de l’affichage de la vidéo &lt;/p&gt;
&lt;h4 id=&quot;Rotation-des-flammes&quot;&gt;&lt;a href=&quot;#Rotation-des-flammes&quot; class=&quot;headerlink&quot; title=&quot;Rotation des flammes&quot;&gt;&lt;/a&gt;Rotation des flammes&lt;/h4&gt;&lt;p&gt;La gestion de la rotation des flammes se fait dans le fichier canvasFire.js. Tout à l’heure nous avons définit l’affichage du mur de flammes selon 4 axes cardinaux. Nous allons donc simplement faire évoluer ces angles au fil du temps pour mettre en place la rotation.&lt;/p&gt;
&lt;p&gt;Commençons par ajouter de nouvelles variables globales : &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timeOut = &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; angleInc = &lt;span class=&quot;number&quot;&gt;360&lt;/span&gt; / (timeOut * &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; angle = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; lastTime = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;et nous allons simplement mettre à jour le contenu de la fonction draw pour faire évoluer les angles : &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// draw colormap-&amp;gt;palette values to screen&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; draw = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// render the image data to the offscreen buffer...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bufferContext.putImageData(imageData, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...then draw it to scale to the onscreen canvas&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Image de base en bas !&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timeStamp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;().getTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    angle += angleInc * ((lastTime - timeStamp) / &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    angle = angle % &lt;span class=&quot;number&quot;&gt;360&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lastTime = timeStamp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    drawAngle(angle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    drawAngle(angle+&lt;span class=&quot;number&quot;&gt;90&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    drawAngle(angle+&lt;span class=&quot;number&quot;&gt;180&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    drawAngle(angle+&lt;span class=&quot;number&quot;&gt;270&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Maintenant notre cercle de flamme évolue en tournant&lt;/p&gt;
&lt;h4 id=&quot;Ajout-d’une-autre-couleur&quot;&gt;&lt;a href=&quot;#Ajout-d’une-autre-couleur&quot; class=&quot;headerlink&quot; title=&quot;Ajout d’une autre couleur&quot;&gt;&lt;/a&gt;Ajout d’une autre couleur&lt;/h4&gt;&lt;p&gt;Afin de compléter comme il se doit notre portal, nous devons donc ajouter une deuxième couleur ! Dans le fichier canvasFire.js la définition de la couleur utilisée se fait dans la méthode initPalette();&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// init palette from warm to white hot colors&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; initPalette = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    palette = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (color === &lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            palette[i] = [(i &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            palette[i + &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;] = [&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, (i &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            palette[i + &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;] = [&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, (i &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            palette[i + &lt;span class=&quot;number&quot;&gt;192&lt;/span&gt;] = [&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (color === &lt;span class=&quot;string&quot;&gt;&#39;blue&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            palette[i] = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, (i &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            palette[i + &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;] = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, (i &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            palette[i + &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;] = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;+(i &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            palette[i + &lt;span class=&quot;number&quot;&gt;192&lt;/span&gt;] = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Et nous allons donc modifier son appel dans la méthode init et ajouter la variable globale color.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; color = &lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.init = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;colorToApply, dim&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (colorToApply)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        color = colorToApply;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    context = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.canvas.getContext(&lt;span class=&quot;string&quot;&gt;&#39;2d&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.round(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.canvas.width / scale);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.round(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.canvas.height / scale);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dim)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dims = dim;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dims = &amp;#123;width: width, height : height&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    colorMap = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(width * height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; colorMap.length; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        colorMap[i] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    initPalette();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    initBuffer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    update();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Comme vous le constatez, nous avons fait évolué la signature de la méthode init. Ceci veut dire que nous allons faire notre ultime modification dans le fichier app.js dans la méthode snapshot(). Nous allons remplacer : &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;canvasDemo.init(&amp;#123;width :minVideoWidth, height : idealHeight + &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;par : &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;canvasDemo.init(isInitiator ? &lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;blue&#39;&lt;/span&gt;, &amp;#123;width :minVideoWidth, height : idealHeight + &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Nous en avons fini avec le code ! &lt;/p&gt;
&lt;h3 id=&quot;Etape-7-Fin&quot;&gt;&lt;a href=&quot;#Etape-7-Fin&quot; class=&quot;headerlink&quot; title=&quot;Etape 7 : Fin&quot;&gt;&lt;/a&gt;Etape 7 : Fin&lt;/h3&gt;&lt;p&gt;Il ne vous reste plus qu’à projeter le résultat de l’application sur 2 murs différents avec une webcam de chaque côté pour filmer le tout ! &lt;/p&gt;
&lt;h2 id=&quot;Credits&quot;&gt;&lt;a href=&quot;#Credits&quot; class=&quot;headerlink&quot; title=&quot;Crédits :&quot;&gt;&lt;/a&gt;Crédits :&lt;/h2&gt;&lt;p&gt;Tout le code source est disponible ici : &lt;a href=&quot;https://github.com/GDG-Nantes/portal-devfest-2013&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/GDG-Nantes/portal-devfest-2013&lt;/a&gt;&lt;/p&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/assets/js_helper/jef-binomed-helper.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/assets/2015-07-PortalWebRTC/portal-custo.js&quot;&gt;&lt;/script&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Realisez-votre-PortalGun-avec-WebRTC&quot;&gt;&lt;a href=&quot;#Realisez-votre-PortalGun-avec-WebRTC&quot; class=&quot;headerlink&quot; title=&quot;Réalisez votre Porta
    
    </summary>
    
      <category term="Tech" scheme="http://jef.binomed.fr/categories/Tech/"/>
    
    
      <category term="Canvas" scheme="http://jef.binomed.fr/tags/Canvas/"/>
    
      <category term="WebRTC" scheme="http://jef.binomed.fr/tags/WebRTC/"/>
    
  </entry>
  
  <entry>
    <title>DevFest Nantes 2014 - Demos Part 2 - Leap Motion</title>
    <link href="http://jef.binomed.fr/2015/02/20/2015-02-20--DevFest-Nantes-2014-Demos-Part-2-Leap-Motion/"/>
    <id>http://jef.binomed.fr/2015/02/20/2015-02-20--DevFest-Nantes-2014-Demos-Part-2-Leap-Motion/</id>
    <published>2015-02-20T12:04:19.000Z</published>
    <updated>2015-12-11T15:05:57.000Z</updated>
    
    <content type="html">&lt;p&gt;Suite des articles sur les démos que j’ai eu l’occasion de coder pour le &lt;a href=&quot;http://devfest.gdgnantes.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DevFest Nantes&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2014/12/10/2014-12-10--DevFest-Nantes-2014-Demos-Part-0-Teasing&quot;&gt;Part 0 - Teasing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2014/12/16/2014-12-16--DevFest-Nantes-2014-Demos-Part-1-Myo&quot;&gt;Part 1 - Myo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Leap-Motion&quot;&gt;&lt;a href=&quot;#Leap-Motion&quot; class=&quot;headerlink&quot; title=&quot;Leap Motion&quot;&gt;&lt;/a&gt;Leap Motion&lt;/h1&gt;&lt;p&gt;La &lt;a href=&quot;https://www.leapmotion.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leap Motion&lt;/a&gt; (j’ai personnellement toujours dit “la”, après beaucoup de monde dit “le”) est un capteur infrarouge qui détecte vos mains de façon très précise et qui permet de récupérer leur coordonnées dans un espace en 3D.  &lt;/p&gt;
&lt;p&gt;Pour beaucoup de monde la Leap Motion, c’était la promesse de ça :  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2014-12-DevFestDemos/images/MinorityReport.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Mais en réalité ce n’est pas tout à fait ça….&lt;/p&gt;
&lt;h2 id=&quot;Theorie&quot;&gt;&lt;a href=&quot;#Theorie&quot; class=&quot;headerlink&quot; title=&quot;Théorie&quot;&gt;&lt;/a&gt;Théorie&lt;/h2&gt;&lt;p&gt;Regardons d’un peu plus près la Leap et comment elle fonctionne.&lt;/p&gt;
&lt;h3 id=&quot;Petit-boitier&quot;&gt;&lt;a href=&quot;#Petit-boitier&quot; class=&quot;headerlink&quot; title=&quot;Petit boîtier&quot;&gt;&lt;/a&gt;Petit boîtier&lt;/h3&gt;&lt;p&gt;La Leap c’est donc ce petit boîtier : &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2014-12-DevFestDemos/images/leap_motion.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Il fonctionne avec l’infrarouge et renvoie les informations interprétées à l’ordinateur via une web socket. On peut récupérer ce genre d’informations : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Position d’une (ou plusieurs) mains dans un espace en 3D&lt;/li&gt;
&lt;li&gt;Position d’un doigt / phalange / paume de main dans un espace en 3D&lt;/li&gt;
&lt;li&gt;Position d’un stylo dans un espace en 3D (pour la partie écriture)&lt;/li&gt;
&lt;li&gt;Reconnaissance de gestes : &lt;ul&gt;
&lt;li&gt;Swype&lt;/li&gt;
&lt;li&gt;Cercles&lt;/li&gt;
&lt;li&gt;Pinch&lt;/li&gt;
&lt;li&gt;Poing fermé &lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pour avoir la liste complète, je vous invite à aller consulter la doc du SDK : &lt;a href=&quot;https://developer.leapmotion.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.leapmotion.com/&lt;/a&gt; &lt;/p&gt;
&lt;h3 id=&quot;Reconnaissance-dans-l’espace&quot;&gt;&lt;a href=&quot;#Reconnaissance-dans-l’espace&quot; class=&quot;headerlink&quot; title=&quot;Reconnaissance dans l’espace&quot;&gt;&lt;/a&gt;Reconnaissance dans l’espace&lt;/h3&gt;&lt;p&gt;Ne vous attendez pas à placer votre Leap Motion proche de la télé, et à contrôler cette dernière depuis votre canapé, la distance de détection de la Leap est relativement courte (&amp;lt;1m). Elle reconnaît ce qui est placé dans son cône de détection.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2014-12-DevFestDemos/images/Leap_InteractionBox.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Ce qui est représenté ici, ce sont 2 choses : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Le cône de détection qui représente la zone globale de détection de la Leap&lt;/li&gt;
&lt;li&gt;L’Interaction Box qui représente une boite servant de référence pour le placement des mains / objets.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;SDK&quot;&gt;&lt;a href=&quot;#SDK&quot; class=&quot;headerlink&quot; title=&quot;SDK&quot;&gt;&lt;/a&gt;SDK&lt;/h3&gt;&lt;p&gt;Le SDK est assez facile d’accès et permet de développer des programmes en JavaScript / Unity, C# / C++ / Java / Python / Objective-C. Ils ont aussi rajouté récemment une API pour interagir plus facilement avec des casques de réalité virtuelle type Occulus Rift (&lt;a href=&quot;https://developer.leapmotion.com/vr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leap Motion VR&lt;/a&gt;)! &lt;/p&gt;
&lt;p&gt;Concrètement, quand on veut simplement utiliser les résultats de notre Leap, il suffit de créer un objet Leap Motion issu du SDK, puis d’écouter les événements correspondants à notre demande. Par exemple, si l’on veut récupérer les mains, il suffit d’écrire ça : &lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;//js.leapmotion.com/leap-0.6.4.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Leap.loop(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;frame&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame.hands.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;hand, index&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;// Faire quelque chose avec la main&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).use(&lt;span class=&quot;string&quot;&gt;&#39;screenPosition&#39;&lt;/span&gt;, &amp;#123;scale: &lt;span class=&quot;number&quot;&gt;0.25&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;L’utilisation du “screenPosition” nous permet de récupérer des positions en lien avec notre fenêtre. Ce qui implique la capacité à traiter les coordonnées plus facilement pour la représentation graphique.&lt;/p&gt;
&lt;h1 id=&quot;Demo-realisee&quot;&gt;&lt;a href=&quot;#Demo-realisee&quot; class=&quot;headerlink&quot; title=&quot;Démo réalisée&quot;&gt;&lt;/a&gt;Démo réalisée&lt;/h1&gt;&lt;p&gt;N’étant pas un as du graphisme ni de la 3D, j’ai voulu réfléchir à l’utilisation de la Leap Motion sur une interface 2D. Quelles pourraient être les interactions possibles ? Etc. Le projet choisi permettait de naviguer dans le programme du DevFest. On pouvait ainsi consulter les sessions et aussi regarder les fiches speakers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2014-12-DevFestDemos/images/leap_navigation.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;L’architecture de cette démo était plus simple : &lt;/p&gt;
&lt;p&gt;Mon ordinateur est directement relié à la Leap Motion et l’application est une page web utilisant le SDK de la Leap.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2014-12-DevFestDemos/images/schema_leap.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Avant de commencer à coder, j’ai cherché à répondre à 3 questions : &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Qu’est ce qui est naturel ?&lt;/li&gt;
&lt;li&gt;Comment avoir une interaction claire ? En d’autres termes, qu’est ce qui fait que l’utilisateur saura utiliser mon application ?&lt;/li&gt;
&lt;li&gt;Comment interagir avec l’écran ?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Il est important de retenir les questions posées plutôt que les réponses apportées. En effet, les choix que j’ai fait sont largement discutables, il s’agit bien sur de pistes. En revanche, les questions restent pertinentes et doivent être posées avant d’attaquer le développement avec ce genre de devices.&lt;/p&gt;
&lt;h2 id=&quot;Interaction-Naturelle&quot;&gt;&lt;a href=&quot;#Interaction-Naturelle&quot; class=&quot;headerlink&quot; title=&quot;Interaction Naturelle ?&quot;&gt;&lt;/a&gt;Interaction Naturelle ?&lt;/h2&gt;&lt;p&gt;Le premier point est pour moi un des plus importants à traiter lors de l’utilisation de nouveaux devices non tactiles !  Le tactile jouit d’une forte adoption et les standards d’utilisation sont fortement répandus et connus. &lt;/p&gt;
&lt;p&gt;A titre d’exemple, tout le monde sait que “pincer” l’écran permettra de dezoomer, etc.Mais qu’en est il est interactions non tactiles ?&lt;/p&gt;
&lt;p&gt;Que ce soit avec la Leap, la Kinect ou le bracelet Myo, les possibilités offertes par les technologies ne sont pas les mêmes et pourtant il faut trouver un moyen d’interagir avec. La seule réponse à trouver est : Qu’est ce qui est naturel ? Quels sont les gestes que je ferais si je devais manipuler cette interface dans le monde réel ?&lt;/p&gt;
&lt;p&gt;Cela prend davantage de sens si l’on se retrouve à manipuler des objets en 3D. Dans le cadre de ma démo, le “naturel” est venu de la duplication de standards connus du web : la gestion des menus dans le web. Je suis aussi resté sur des gestes simples. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Je n’ai pas introduit de gestures car ils peuvent ne pas être compris par l’utilisateur&lt;/li&gt;
&lt;li&gt;Le doigt fait office de souris. De cette manière, la navigation est grandement simplifiée.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Interaction-claire&quot;&gt;&lt;a href=&quot;#Interaction-claire&quot; class=&quot;headerlink&quot; title=&quot;Interaction claire&quot;&gt;&lt;/a&gt;Interaction claire&lt;/h2&gt;&lt;p&gt;Quand bien même, on aura trouvé des gestes naturels, il faut expliquer à l’utilisateur comment utiliser l’application.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2014-12-DevFestDemos/images/details_leap.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Une pop-up est affichée si personne n’utilise l’application afin d’indiquer quelle est la première action. La police de caractère et la taille de l’image sont importantes car cela doit être la première information que l’utilisateur voit.&lt;/li&gt;
&lt;li&gt;Une zone de légende permet à l’utilisateur d’avoir une information complémentaire. La taille de la police et de l’icône est plus petite pour ne pas interférer avec la première information. L’icône utilisée montre la main dans une certaine configuration et invite l’utilisateur à pointer son doigt dans une direction.&lt;/li&gt;
&lt;li&gt;La barre bleue permet de cacher le menu s’il n’y a aucune interaction. De cette façon l’utilisateur n’est pas pollué d’informations inutiles.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;J’ai beau préciser comment interagir avec l’écran, il faut une chose importante pour l’utilisateur : le FEEDBACK ! &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2014-12-DevFestDemos/images/leap_feedback.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Le SDK de Leap Motion fournit un modèle 3D Unity de la main détectée. J’ai donc intégré cette dernière à mon interface en guise de feedback. J’ai aussi rajouté un point blanc correspondant à l’équivalent du curseur d’une souris. Étant donné que mon application est en 2D et orientée “consultation de contenu”, il me fallait un élément de sélection.&lt;/p&gt;
&lt;h2 id=&quot;Interaction-avec-l’ecran&quot;&gt;&lt;a href=&quot;#Interaction-avec-l’ecran&quot; class=&quot;headerlink&quot; title=&quot;Interaction avec l’écran&quot;&gt;&lt;/a&gt;Interaction avec l’écran&lt;/h2&gt;&lt;p&gt;Pour interagir, j’ai choisi d’avoir le même fonctionnement qu’un menu dans les sites web. De cette façon l’utilisateur reste dans un mécanisme connu.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2014-12-DevFestDemos/images/leap_navigation.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;La zone sur laquelle est l’utilisateur porte une couleur différente afin de lui signaler sa sélection. &lt;/p&gt;
&lt;p&gt;Reste à voir maintenant comment valider un choix ?&lt;/p&gt;
&lt;p&gt;J’ai dans un premier temps expérimenté la sélection en mode push. C’est à dire, utiliser la profondeur pour donner à l’utilisateur l’impression qu’il clique sur le bouton. &lt;/p&gt;
&lt;p&gt;En pratique, il s’est avéré que cette interaction était assez peu intuitive et plus difficile à calibrer en premier lieu. Je pense cependant que si j’avais eu plus de temps elle aurait pu être assez intéressante et pertinente. Mais passons, la sélection dans l’application s’est faite de 2 façons.&lt;/p&gt;
&lt;p&gt;La première, par un mécanisme de glisse qui permet à l’utilisateur de remplir une jauge. Une fois la jauge remplie l’action est validée&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2014-12-DevFestDemos/images/leap_selection.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;La seconde, tout droit issue du monde Kinect avec la validation d’une sélection après un certain temps. De la même façon une jauge se remplit afin d’indiquer à l’utilisateur qu’il va valider l’action.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2014-12-DevFestDemos/images/leap_selection_2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;J’ai volontairement gardé les 2 sélections pour voir la réaction des utilisateurs. Globalement les 2 validations ont été bien comprises et utilisées.&lt;/p&gt;
&lt;h3 id=&quot;Hack-sur-le-mouse-move&quot;&gt;&lt;a href=&quot;#Hack-sur-le-mouse-move&quot; class=&quot;headerlink&quot; title=&quot;Hack sur le mouse move&quot;&gt;&lt;/a&gt;Hack sur le mouse move&lt;/h3&gt;&lt;p&gt;J’ai quand même dû faire un petit hack pour cette démo. En effet, un des écrans affiche des graphiques dynamiques et la légende des graphiques n’apparaît que sur un calcul fait avec le “mousemove”. La Leap n’émulant pas nativement la souris, j’ai donc récupéré les événements de position de ma main et je les ai transformés en “mousemove”. Le code suivant est une directive AngularJS mais la théorie reste la même.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;components.directive(&lt;span class=&quot;string&quot;&gt;&#39;leapMouseMove&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;$rootScope&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;$rootScope&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; directiveDefinitionObject = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    restrict: &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    scope: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    link: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;postLink&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;$scope, iElement, iAttrs&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; element = iElement[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; boundingRect = element.getBoundingClientRect();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Id : &#39;&lt;/span&gt;+element.id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(boundingRect);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; unregister = $scope.$watch(&lt;span class=&quot;string&quot;&gt;&#39;leapState&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;leapState, oldleapState&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (leapState.handActive)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; screenPosition = leapState.fingerPos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          dispatchEvent(element, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mouseEvent(&lt;span class=&quot;string&quot;&gt;&#39;mousemove&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              screenPosition[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;comment&quot;&gt;// Screen X&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              screenPosition[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;comment&quot;&gt;// Screen Y&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              screenPosition[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;comment&quot;&gt;// Client X&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              screenPosition[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]  &lt;span class=&quot;comment&quot;&gt;// Client Y&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              ))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mouseEvent&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;type, sx, sy, cx, cy&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; evt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; e = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          bubbles: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          cancelable: (type != &lt;span class=&quot;string&quot;&gt;&quot;mousemove&quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          view: &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          detail: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          screenX: sx, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          screenY: sy,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          clientX: cx, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          clientY: cy,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ctrlKey: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          altKey: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          shiftKey: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          metaKey: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          button: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          relatedTarget: &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;( &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createEvent ) == &lt;span class=&quot;string&quot;&gt;&quot;function&quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          evt = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createEvent(&lt;span class=&quot;string&quot;&gt;&quot;MouseEvents&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          evt.initMouseEvent(type, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.bubbles, e.cancelable, e.view, e.detail,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.screenX, e.screenY, e.clientX, e.clientY,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.ctrlKey, e.altKey, e.shiftKey, e.metaKey,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.button, &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.parentNode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createEventObject) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          evt = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createEventObject();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (prop &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          evt[prop] = e[prop];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          evt.button = &amp;#123; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#125;[evt.button] || evt.button;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; evt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dispatchEvent&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;el, evt&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (el.dispatchEvent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          el.dispatchEvent(evt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (el.fireEvent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          el.fireEvent(&lt;span class=&quot;string&quot;&gt;&#39;on&#39;&lt;/span&gt; + type, evt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; evt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      $rootScope.$on(&lt;span class=&quot;string&quot;&gt;&#39;changeRouteEvent&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        unregister();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; directiveDefinitionObject;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Sources&quot;&gt;&lt;a href=&quot;#Sources&quot; class=&quot;headerlink&quot; title=&quot;Sources&quot;&gt;&lt;/a&gt;Sources&lt;/h1&gt;&lt;p&gt;Les sources de ce projet sont disponibles ici &lt;a href=&quot;https://github.com/GDG-Nantes/leap-devfest2014&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github - LeapDevFest&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Merci aussi à &lt;a href=&quot;http://twitter.com/brongier&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Baptiste Rongier&lt;/a&gt; qui est l’ergonome (le cerveau des interactions) qui m’a aidé dans la réalisation de cette démo.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Suite des articles sur les démos que j’ai eu l’occasion de coder pour le &lt;a href=&quot;http://devfest.gdgnantes.com&quot; target=&quot;_blank&quot; rel=&quot;exte
    
    </summary>
    
      <category term="Event" scheme="http://jef.binomed.fr/categories/Event/"/>
    
    
      <category term="devfest" scheme="http://jef.binomed.fr/tags/devfest/"/>
    
      <category term="leap motion" scheme="http://jef.binomed.fr/tags/leap-motion/"/>
    
  </entry>
  
  <entry>
    <title>DevFest Paris 2015</title>
    <link href="http://jef.binomed.fr/2015/02/04/2015-02-04--DevFest-Paris-2015/"/>
    <id>http://jef.binomed.fr/2015/02/04/2015-02-04--DevFest-Paris-2015/</id>
    <published>2015-02-04T07:57:04.000Z</published>
    <updated>2015-12-11T15:05:57.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Devfest-Paris-30-01-2015&quot;&gt;&lt;a href=&quot;#Devfest-Paris-30-01-2015&quot; class=&quot;headerlink&quot; title=&quot;Devfest Paris : 30 / 01 / 2015&quot;&gt;&lt;/a&gt;Devfest Paris : 30 / 01 / 2015&lt;/h1&gt;&lt;p&gt;J’ai eu la chance d’être retenu comme speaker au &lt;a href=&quot;http://devfest.gdgparis.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DevFest Paris&lt;/a&gt; sur un sujet autour du WebRTC.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2015-01-DevFest/logos.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;La journée s’est déroulée de façon assez classique et voici le programme que j’ai suivi sur cette journée : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;9h00 : Keynote avec le &lt;a href=&quot;http://gdgparis.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GDG Paris&lt;/a&gt; et &lt;a href=&quot;http://twitter.com/alexismp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Alexis Moussine-Pouchkine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;10h00 : PolymerJS avec &lt;a href=&quot;https://plus.google.com/u/0/+MartinGorner/posts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Martin Gorner&lt;/a&gt; et &lt;a href=&quot;http://twitter.com/cbalit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cyril Balit&lt;/a&gt;    &lt;/li&gt;
&lt;li&gt;11h00 : J’ai préféré faire une pause networking&lt;/li&gt;
&lt;li&gt;12h00 : Repas&lt;/li&gt;
&lt;li&gt;13h30 : J’ai donné ma session sur WebRTC&lt;/li&gt;
&lt;li&gt;14h30 : Angular2 avec &lt;a href=&quot;http://twitter.com/ThierryChatel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Thierry Chatel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;16h15 : Flexbox par &lt;a href=&quot;http://twitter.com/goetter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Raphael Goetter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Keynote&quot;&gt;&lt;a href=&quot;#Keynote&quot; class=&quot;headerlink&quot; title=&quot;Keynote&quot;&gt;&lt;/a&gt;Keynote&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/assets/2015-01-DevFest/devfest_paris.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Pendant la keynote, le GDG Paris a commencé par nous présenter la journée puis Alexis a pris la parole pour parler des composantes à prendre en compte pour faire des applications de qualités.&lt;/p&gt;
&lt;p&gt;Globalement, Alexis nous a expliqué en quoi Google mettait à disposition tout un ensemble d’outils aussi bien sur la partie front que sur la partie backend pour aider les développeurs. Il a donc été question de Material Design / Plateforme Cloud / Retours utilisateurs.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Matérial design est le nouveau thème par défaut dans lolipop mais il s’adresse aussi aux applications desktop via Polymer par exemple.&lt;/li&gt;
&lt;li&gt;L’offre cloud s’est beaucoup diversifiée ces derniers temps surtout avec l’intégration d’outils comme docker par exemple.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Je ne mettrais qu’une citation d’Alexis qui m’a bien fait sourire : &lt;/p&gt;
&lt;blockquote&gt;On ne désire pas les choses par ce qu’elles sont belles mais c’est par ce qu’elles sont belles qu’on les désire&lt;/blockquote&gt;


&lt;h2 id=&quot;Les-WebComponents-amp-Polymer-une-revolution&quot;&gt;&lt;a href=&quot;#Les-WebComponents-amp-Polymer-une-revolution&quot; class=&quot;headerlink&quot; title=&quot;Les WebComponents &amp;amp; Polymer : une révolution ?&quot;&gt;&lt;/a&gt;Les WebComponents &amp;amp; Polymer : une révolution ?&lt;/h2&gt;&lt;p&gt;Cyril Balit &amp;amp; Martin Gorner ont fait une introduction aux concepts &amp;amp; composants disponibles via PolymerJS avec le style Paper. Ils nous ont ainsi expliqué certains des principes qui se cachent derrière Material Design.&lt;/p&gt;
&lt;h3 id=&quot;L’enjeu&quot;&gt;&lt;a href=&quot;#L’enjeu&quot; class=&quot;headerlink&quot; title=&quot;L’enjeu&quot;&gt;&lt;/a&gt;L’enjeu&lt;/h3&gt;&lt;p&gt;Un des principaux objectifs de Polymer et de permettre de concevoir des IHMs  réutilisables et basées sur les nouveaux standards des webComponents&lt;/p&gt;
&lt;p&gt;Les WebComponents, c’est donc l’association de 4 standards : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML Import : &lt;ul&gt;
&lt;li&gt;Importer un fragment html depuis une page web&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shadow Dom&lt;ul&gt;
&lt;li&gt;C’est la garantie de l’isolation du composant&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Templates&lt;ul&gt;
&lt;li&gt;Permet de définir une zone réutilisable dans votre code html qui sera disponible après coup&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Custom Elements&lt;ul&gt;
&lt;li&gt;La création des tags personnels ! (je tacherais de créer une balise à titre d’exemple dans un prochain article) &lt;jef-binomed&gt;&lt;/jef-binomed&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Compatibilite-navigateurs&quot;&gt;&lt;a href=&quot;#Compatibilite-navigateurs&quot; class=&quot;headerlink&quot; title=&quot;Compatibilité navigateurs&quot;&gt;&lt;/a&gt;Compatibilité navigateurs&lt;/h3&gt;&lt;iframe src=&quot;https://docs.google.com/spreadsheet/pub?key=0Anye-JMjUkZZdDdoblh6dTlwcWRLQkhKbTVzdHJtcXc&amp;single=true&amp;gid=2&amp;output=html&amp;range=A1:Q43&quot; seamless style=&quot;border:none;width:100%;height:830px;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;Polymer&quot;&gt;&lt;a href=&quot;#Polymer&quot; class=&quot;headerlink&quot; title=&quot;Polymer !&quot;&gt;&lt;/a&gt;Polymer !&lt;/h3&gt;&lt;p&gt;C’est donc un polyfill pour les WebComponents qui propose aussi un certain nombre de composants utilisables dans nos interfaces.&lt;/p&gt;
&lt;h4 id=&quot;Architecture&quot;&gt;&lt;a href=&quot;#Architecture&quot; class=&quot;headerlink&quot; title=&quot;Architecture&quot;&gt;&lt;/a&gt;Architecture&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/assets/2015-01-DevFest/polymer_archi.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Paper-amp-Material-design&quot;&gt;&lt;a href=&quot;#Paper-amp-Material-design&quot; class=&quot;headerlink&quot; title=&quot;Paper &amp;amp; Material design&quot;&gt;&lt;/a&gt;Paper &amp;amp; Material design&lt;/h3&gt;&lt;p&gt;Vient ensuite Paper &amp;amp; Material Design. Paper est une implémentation de Matérial Design pour le web. Le nom n’est pas anodin car un des principes de Material Design est de dire que l’information est proposée sur du papier (le matériel !) et donc c’est le support de base de présentation du contenu.&lt;/p&gt;
&lt;p&gt;On peut retenir qu’un des enjeux est de donner de l’information rapidement et efficacement ! Pour cela, les informations sont très colorées. Dans lolipop, on peut donner une image et il nous ressort en fonction de l’image la couleur principale correspondante. Les animations et transitions permettent de compléter l’expérience utilisateur en lui offrant une continuité graphique qui ne perd pas notre utilisateur avec un écran noir de transition !&lt;/p&gt;
&lt;h4 id=&quot;Composants&quot;&gt;&lt;a href=&quot;#Composants&quot; class=&quot;headerlink&quot; title=&quot;Composants :&quot;&gt;&lt;/a&gt;Composants :&lt;/h4&gt;&lt;p&gt;PolymerJS vient avec un certain nombre de composants que l’on peut réutiliser afin d’agrémenter notre IHM. Je n’en ai noté que quelque uns mais la liste est grande et facilite grandement le travail des développeurs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FAB : Floating Action Button : Bouton d’action principal&lt;/li&gt;
&lt;li&gt;Ripple ou Ink Effect : Retour visuel sur une interaction&lt;/li&gt;
&lt;li&gt;Hero element : Élément qui fait la transition entre 2 vues&lt;/li&gt;
&lt;li&gt;core-toolbar : L’actionbar &lt;/li&gt;
&lt;li&gt;core-header-panel : Conteneur au-dessus qui gère la toolbar et le contenu&lt;/li&gt;
&lt;li&gt;core-drawer-panel : Composant responsive &lt;/li&gt;
&lt;li&gt;paper-input : Composant de saisie avec toutes les informations nécessaire à la validation&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.polymer-project.org/docs/elements/paper-elements.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Liste des éléments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Nos-propres-composants&quot;&gt;&lt;a href=&quot;#Nos-propres-composants&quot; class=&quot;headerlink&quot; title=&quot;Nos propres composants&quot;&gt;&lt;/a&gt;Nos propres composants&lt;/h4&gt;&lt;p&gt;Pour déclarer un composant personnel, il suffit simplement de déclarer un fichier HTML qui contient la déclaration de la balise (le nom doit forcément contenir un “-“ pour ne pas être confondu avec un autre élément du DOM), le HTML, le CSS et le javascript associé.&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;import&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;/components/polymer/polymer.html&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;polymer-element&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;ready-element&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    This element has a ready() method.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;el&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Not ready...&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Polymer(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      owner: &lt;span class=&quot;string&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ready: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.$.el.textContent = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.owner +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;string&quot;&gt;&quot; is ready!&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;polymer-element&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;WebRTC-Revolutionnons-le-partage-d’informations-dans-le-browser&quot;&gt;&lt;a href=&quot;#WebRTC-Revolutionnons-le-partage-d’informations-dans-le-browser&quot; class=&quot;headerlink&quot; title=&quot;WebRTC : Révolutionnons le partage d’informations dans le browser&quot;&gt;&lt;/a&gt;WebRTC : Révolutionnons le partage d’informations dans le browser&lt;/h2&gt;&lt;p&gt;Plutôt que de parler de ma session, je vous invite à aller voir les slides ou les vidéos que l’on a déjà pu filmer de cette présentation&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jef.binomed.fr/binomed_docs/Prezs/WebRTC/index.html&quot;&gt;Présentation WebRTC&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;AngularJS-2-0…-et-avant&quot;&gt;&lt;a href=&quot;#AngularJS-2-0…-et-avant&quot; class=&quot;headerlink&quot; title=&quot;AngularJS 2.0… et avant ?&quot;&gt;&lt;/a&gt;AngularJS 2.0… et avant ?&lt;/h2&gt;&lt;p&gt;Thierry Chatel nous a fait une présentation pour nous rassurer sur l’avenir d’Angular 2 et il a ainsi revu les principales annonces qui ont pu être faites pendant NG-Europe.&lt;/p&gt;
&lt;p&gt;Globalement, s’il y a une chose à  retenir, c’est : ne vous inquiétez pas ! Certes Angular 2 va changer beaucoup de choses mais en même temps c’est une bonne chose. Alors que le web bouge très vite et que nous sommes à l’aube de voir débarquer EMACScript 6, les webcomponents, … dans nos navigateurs, il n’était pas envisageable pour la team Angular de ne pas en tenir compte et donc Angular 2 est clairement tourné vers l’avenir !&lt;/p&gt;
&lt;p&gt;Prenons quelques-uns des arguments de Thierry.&lt;/p&gt;
&lt;h3 id=&quot;Application-perdurant-dans-le-temps&quot;&gt;&lt;a href=&quot;#Application-perdurant-dans-le-temps&quot; class=&quot;headerlink&quot; title=&quot;Application perdurant dans le temps&quot;&gt;&lt;/a&gt;Application perdurant dans le temps&lt;/h3&gt;&lt;p&gt;Thierry a rencontré beaucoup de personnes lui expliquant vouloir développer des applications durant 10 ans basées sur AngularJS. Thierry s’est posé la question suivante : “c’était quoi le web il y a 10 ans ?”. Et en effet, si l’on regarde en arrière, on se rend compte qu’en février 2005 sortait “prototype” et que ce n’est qu’en juillet 2006 que le terme AJAX est apparu vraiment (même s’il existait déjà depuis quelques années). Il n’y a donc que depuis 9 ans que l’on a commencé à réaliser massivement des applications asynchrones ! Autant dire qu’il s’en est passé des choses depuis 10 ans. Il va sûrement s’en passer encore beaucoup sur les 10 prochaines années. &lt;/p&gt;
&lt;p&gt;Dire que l’on veut une application qui va durer 10, pourquoi pas, mais cela a surtout du sens côté serveur ! Le front évolue trop vite pour que l’on puisse chercher à faire durer des applications côté front sur 10 ans. Pour information, la version d’IE disponible il y a 10 ans était IE 6…&lt;/p&gt;
&lt;h3 id=&quot;Maintenance-de-la-version-1-x&quot;&gt;&lt;a href=&quot;#Maintenance-de-la-version-1-x&quot; class=&quot;headerlink&quot; title=&quot;Maintenance de la version 1.x&quot;&gt;&lt;/a&gt;Maintenance de la version 1.x&lt;/h3&gt;&lt;p&gt;Pour le moment, l’équipe de Google n’a communiqué aucune date sur l’arrêt du support d’Angular en version 1.x. Mais Thierry faisait remarquer que l’adhésion à ce framework a été tellement forte par la communauté qu’il ne fait aucun doute que des gens reprendront le projet pour du support mineur lors de l’arrêt officiel du support de Google.&lt;/p&gt;
&lt;h3 id=&quot;Suppression-du-scope-et-du-controleur-je-fais-comment-maintenant&quot;&gt;&lt;a href=&quot;#Suppression-du-scope-et-du-controleur-je-fais-comment-maintenant&quot; class=&quot;headerlink&quot; title=&quot;Suppression du scope et du contrôleur, je fais comment maintenant ?&quot;&gt;&lt;/a&gt;Suppression du scope et du contrôleur, je fais comment maintenant ?&lt;/h3&gt;&lt;p&gt;Thierry s’est penché sur les raisons qui ont amené à la suppression de ces 2 composants qui sont aujourd’hui au coeur du framework Angular. Il nous a expliqué que si l’on suit les bonnes pratiques du développement Angular, notre contrôleur ne sert qu’à initialiser le scope et que très souvent, il sert de “passe plat” entre nos services et nos directives. En effet, pour Thierry, le code métier doit figurer dans les services afin de séparer au mieux les couches et ainsi avoir un code propre et maintenable. Tout ça pour en venir au fait que même la déclaration d’un contrôleur dans notre application se fait via une directive ng-controller… Ne serait-il pas plus logique de faire en sorte que nos directives portent les informations directement et que la simple hiérarchie du DOM et un agencement propres de nos services suffise à faire communiquer le tout ? C’est exactement ce qui est proposé avec Angular2.&lt;/p&gt;
&lt;p&gt;Il nous a donc expliqué qu’au lieu de publier dans le scope d’un contrôleur, nous allions simplement publier dans une directive. &lt;/p&gt;
&lt;p&gt;Afin de faciliter la migration vers Angular2, Thierry propose d’utiliser par exemple la déclaration “Controller as” et il préconise aussi de bien séparer les couches (services,…) pour rendre notre contrôleur le moins important possible.&lt;/p&gt;
&lt;h3 id=&quot;Slides&quot;&gt;&lt;a href=&quot;#Slides&quot; class=&quot;headerlink&quot; title=&quot;Slides&quot;&gt;&lt;/a&gt;Slides&lt;/h3&gt;&lt;p&gt;Retrouvez les slides de Thierry : &lt;a href=&quot;http://tchatel.github.io/slides-devfestparis2015#/#/1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;FlexBox-Revolution&quot;&gt;&lt;a href=&quot;#FlexBox-Revolution&quot; class=&quot;headerlink&quot; title=&quot;FlexBox Révolution&quot;&gt;&lt;/a&gt;FlexBox Révolution&lt;/h2&gt;&lt;p&gt;Raphaël Goetter nous a présenté la propriété css “flex-box”. Cette dernière ou plutôt ensemble de propriétés a 4 objectifs : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Distribuer : Comment mes éléments vont se positionner dans le parent (verticalement / horizontalement )&lt;/li&gt;
&lt;li&gt;Ordonnancer : Dans quel ordre vont-ils être affichés ? &lt;/li&gt;
&lt;li&gt;Alignement : Comment les éléments vont-ils être alignés ?&lt;/li&gt;
&lt;li&gt;Flexibilité : Quelle places vont prendre mes éléments dans le parent ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Spec-amp-compatibilite&quot;&gt;&lt;a href=&quot;#Spec-amp-compatibilite&quot; class=&quot;headerlink&quot; title=&quot;Spec &amp;amp; compatibilité&quot;&gt;&lt;/a&gt;Spec &amp;amp; compatibilité&lt;/h3&gt;&lt;p&gt;Aujourd’hui c’est disponible à partir de IE10+ et dans tous les autres navigateurs (c’est même disponible dans android 2.1). Raphaël nous disait que cela représente 95% du marché ! Mais en tout cas ce qui est sûr, c’est que concernant le mobile, vous pouvez foncer les yeux fermés et utiliser flexbox dans la partie media-quieries de vos sites mobiles !&lt;/p&gt;
&lt;p&gt;Concernant la spec, elle a été rétrogradée il y a peu à l’état de brouillon. Ceci est dû à un manque de cohérence dans l’écriture de certaines propriétés. Mais Raphaël mise quand même sur une disponibilité officielle de la part du W3C prochainement. &lt;/p&gt;
&lt;h3 id=&quot;Fonctionnalites&quot;&gt;&lt;a href=&quot;#Fonctionnalites&quot; class=&quot;headerlink&quot; title=&quot;Fonctionnalités&quot;&gt;&lt;/a&gt;Fonctionnalités&lt;/h3&gt;&lt;p&gt;Voici en vrac ce que l’on peut faire avec flexbox :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alignement vertical : oui j’ai bien dit alignement vertical ! &lt;/li&gt;
&lt;li&gt;Regroupement par catégorie grâce à la notion d’ordre&lt;/li&gt;
&lt;li&gt;Réorganisation graphique très simple de nos IHMs&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;La-Distribution&quot;&gt;&lt;a href=&quot;#La-Distribution&quot; class=&quot;headerlink&quot; title=&quot;La Distribution&quot;&gt;&lt;/a&gt;La Distribution&lt;/h4&gt;&lt;p&gt;Par défaut, la distribution est horizontale. C’est à dire que nos éléments, au lieu d’être les un en dessous des autres, seront les uns à côté des autres&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:flex&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Si l’on veut changer la direction sur vertical par exemple, il faudra setter la propriété flex-direction. De même si notre contenu dépasse, on peut demander à la propriété de faire un retour à la ligne automatique via&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;flex-wrap&lt;/span&gt;: &lt;span class=&quot;tag&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;L’ordonnancement&quot;&gt;&lt;a href=&quot;#L’ordonnancement&quot; class=&quot;headerlink&quot; title=&quot;L’ordonnancement&quot;&gt;&lt;/a&gt;L’ordonnancement&lt;/h4&gt;&lt;p&gt;Concrètement, on peut changer l’ordre d’affichage de nos éléments du dom grâce à la propriété&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;order &lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Cela fonctionne de façon comparable aux z-index. Plus l’ordre est grand, plus il sera loin dans le flux, plus le chiffre est bas (chiffres négatifs autorisés), plus l’élément sera au début du flux.&lt;/p&gt;
&lt;p&gt;L’ordonnancement peut être utilisé par exemple pour faire des regroupements graphiques d’éléments ayant quelque chose en commun. Raphaël nous a montré comment au sein d’une div contenant des liens vers des fichiers (ppt, pdf, doc, …) les regrouper visuellement grâce à flex.&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr_selector&quot;&gt;[href$=&quot;.pdf&quot;]&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;order&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr_selector&quot;&gt;[href$=&quot;.doc&quot;]&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;order&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;De cette manière, tous les pdfs se retrouveront à côté, même chose pour les docs.&lt;/p&gt;
&lt;h4 id=&quot;L’alignement&quot;&gt;&lt;a href=&quot;#L’alignement&quot; class=&quot;headerlink&quot; title=&quot;L’alignement&quot;&gt;&lt;/a&gt;L’alignement&lt;/h4&gt;&lt;p&gt;L’alignement permet de définir comment nos éléments vont être alignés dans leur conteneur ! &lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;justify-content&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;flex-end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Fera par exemple alignement vers le bas si flex-orientation est en column (vertical)&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:center&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Quant à lui centrera le contenu en fonction de l’orientation primaire de la flexbox.&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;align-items&lt;/span&gt; : &lt;span class=&quot;tag&quot;&gt;strech&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Permettra d’aligner selon l’autre axe&lt;/p&gt;
&lt;h4 id=&quot;La-flexibilite&quot;&gt;&lt;a href=&quot;#La-flexibilite&quot; class=&quot;headerlink&quot; title=&quot;La flexibilité&quot;&gt;&lt;/a&gt;La flexibilité&lt;/h4&gt;&lt;p&gt;Concernant la place prise par l’élément, 3 propriétés sont en jeux : &lt;/p&gt;
&lt;p&gt;La propriété flex est un raccourci de trois propriétés, flex-grow, flex-shrink et flex-basis, qui s’appliquent au flex-container et dont les fonctionnalités sont:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-grow : capacité pour un élément à s’étirer dans l’espace restant,&lt;/li&gt;
&lt;li&gt;flex-shrink : capacité pour un élément à se contracter si nécessaire,&lt;/li&gt;
&lt;li&gt;flex-basis : taille initiale de l’élément avant que l’espace restant ne soit distribué.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Par défaut, les valeurs de ces propriétés sont : flex-grow: 0, flex-shrink: 1 et flex-basis: auto.&lt;/p&gt;
&lt;p&gt;En clair, les flex-items n’occupent initialement que la taille minimale de leur contenu.&lt;/p&gt;
&lt;h3 id=&quot;Ressources&quot;&gt;&lt;a href=&quot;#Ressources&quot; class=&quot;headerlink&quot; title=&quot;Ressources&quot;&gt;&lt;/a&gt;Ressources&lt;/h3&gt;&lt;p&gt;Je vous invite à aller consulter l’article disponible sur le site d’Alsa créations : &lt;a href=&quot;http://www.alsacreations.com/tuto/lire/1493-css3-flexbox-layout-module.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Article AlsaCréations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/goetter/flexbox-revolution&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Slides de la présentation&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h1&gt;&lt;p&gt;La journée fut riche en rencontre et en conférences de qualités, je suis donc content d’avoir pu faire partie de cette édition ! Suiviez le GDG Paris pour être tenus au courant de la publication des vidéos et slides.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Devfest-Paris-30-01-2015&quot;&gt;&lt;a href=&quot;#Devfest-Paris-30-01-2015&quot; class=&quot;headerlink&quot; title=&quot;Devfest Paris : 30 / 01 / 2015&quot;&gt;&lt;/a&gt;Devfest 
    
    </summary>
    
      <category term="Event" scheme="http://jef.binomed.fr/categories/Event/"/>
    
    
      <category term="Angular2" scheme="http://jef.binomed.fr/tags/Angular2/"/>
    
      <category term="CSS" scheme="http://jef.binomed.fr/tags/CSS/"/>
    
      <category term="PolymerJS" scheme="http://jef.binomed.fr/tags/PolymerJS/"/>
    
  </entry>
  
  <entry>
    <title>GDG Nantes : Intel XDK</title>
    <link href="http://jef.binomed.fr/2015/02/02/2015-02-02--GDG-Nantes-Intel-XDK/"/>
    <id>http://jef.binomed.fr/2015/02/02/2015-02-02--GDG-Nantes-Intel-XDK/</id>
    <published>2015-02-02T13:30:30.000Z</published>
    <updated>2015-12-11T15:05:57.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Soiree-GDG-Nantes-presentation-du-intel-XDK&quot;&gt;&lt;a href=&quot;#Soiree-GDG-Nantes-presentation-du-intel-XDK&quot; class=&quot;headerlink&quot; title=&quot;Soirée GDG Nantes : présentation du intel XDK&quot;&gt;&lt;/a&gt;Soirée GDG Nantes : présentation du intel XDK&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/assets/2015-01-XDK/ecran_principal.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Le &lt;a href=&quot;http://www.gdgnantes.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GDG Nantes&lt;/a&gt; a reçu &lt;a href=&quot;https://twitter.com/rolios&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Olivier Gonthier&lt;/a&gt; le 22 Janvier afin qu’il nous présente le framework mobile développé par Intel : “Intel XDK”&lt;/p&gt;
&lt;p&gt;#XDK ?&lt;/p&gt;
&lt;p&gt;Avant de parler du XDK, il faut parler du HTML5 sur le mobile. En effet, le HTML5 est aujourd’hui très répandu et la communauté des développeurs Web est très grande ! Plutôt que de réinventer un n-ième langage, Intel a fait le choix du HTML.&lt;/p&gt;
&lt;p&gt;Vous l’aurez compris; le XDK se positionne sur le marché des frameworks générant des applications hybrides reposant entre autre sur cordova.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2015-01-XDK/Native_html5_hybrid.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Concrètement, le XDK est un ensemble d’outils : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Editeur de code&lt;/li&gt;
&lt;li&gt;Gestionnaire d’assets&lt;/li&gt;
&lt;li&gt;Designer d’application&lt;/li&gt;
&lt;li&gt;Emulateur&lt;/li&gt;
&lt;li&gt;Debugger&lt;/li&gt;
&lt;li&gt;Ensemble d’apis&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Base-sur-l’existant&quot;&gt;&lt;a href=&quot;#Base-sur-l’existant&quot; class=&quot;headerlink&quot; title=&quot;Basé sur l’existant&quot;&gt;&lt;/a&gt;Basé sur l’existant&lt;/h1&gt;&lt;p&gt;Afin d’éviter de réinventer la roue, ils ont choisi de se baser sur des outils / services existants !&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L’éditeur est basé sur brackets et il est donc compatible avec les plugins brackets &lt;/li&gt;
&lt;li&gt;L’émulateur est basé sur Ripple&lt;/li&gt;
&lt;li&gt;Le framework choisit pour la partie hybride est basé sur Cordova&lt;/li&gt;
&lt;li&gt;Le debugging se fait avec des devTools&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;L’éditeur de code propose aussi d’utiliser des environnements graphiques pour son application basé sur des solutions répandues : jQuery Mobile ou Bootstrap. &lt;/p&gt;
&lt;p&gt;Cela n’empêche pas le développeur de choisir sa propre librairie ou d’utiliser des framework css différents. L’avantage d’utiliser jQuery Mobile ou Bootstrap dans un projet XDK, est que l’IDE propose un éditeur WYSIWYG utilisant directement les composants de ces frameworks.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2015-01-XDK/designer.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Cependant, Intel fourni le “AppFramwework” : framework opensource à la sauce jQuery qui offre l’avantage d’avoir un style final proche du natif de la plateforme pour laquelle l’application est générée.&lt;/p&gt;
&lt;h1 id=&quot;Les-services-integres&quot;&gt;&lt;a href=&quot;#Les-services-integres&quot; class=&quot;headerlink&quot; title=&quot;Les services intégrés&quot;&gt;&lt;/a&gt;Les services intégrés&lt;/h1&gt;&lt;p&gt;Intel a pensé aux développeurs et aux services tiers. En effet, ils ont créé un certain nombre de ponts vers les services principaux comme DropBox, Youtube, … L’intégration de ces services est donc simplifiée et facilitée par l’éditeur.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2015-01-XDK/services.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;L’éditeur propose de simplement remplir les champs en lien avec l’API et le reste se fait tout seul. Comme nous sommes dans le web, il est possible de binder directement son service sur son IHM, pour cela, Intel propose d’utiliser Backbone ou AngularJS.&lt;/p&gt;
&lt;h1 id=&quot;Build&quot;&gt;&lt;a href=&quot;#Build&quot; class=&quot;headerlink&quot; title=&quot;Build&quot;&gt;&lt;/a&gt;Build&lt;/h1&gt;&lt;p&gt;Comme le build est basé sur Cordova, une application codée avec le SDK peut être buildé sur les mêmes plateformes que Cordova.&lt;/p&gt;
&lt;p&gt;Seul hic : le build se fait depuis les serveurs d’Intel. Les sources sont envoyées sur les serveurs d’Intel pour générer pour la bonne plateforme. Cependant, il reste quand même possible de gérer son build perso. C’est juste un peu plus compliqué, car il faut gérer soit même les dépendances, les installations de SDK etc…&lt;/p&gt;
&lt;p&gt;Concernant les builds Android, Intel propose de générer l’application avec la webview &lt;a href=&quot;https://crosswalk-project.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Crosswalk&lt;/a&gt;. Cette webview dispo pour android 4+ donne accès à plus d’API que la webview de base. La webview étant embarqué, l’apk sera plus gros qu’un projet compilé sans crosswalk.&lt;/p&gt;
&lt;h1 id=&quot;Ce-que-j’ai-retenu-des-outils-a-disposition&quot;&gt;&lt;a href=&quot;#Ce-que-j’ai-retenu-des-outils-a-disposition&quot; class=&quot;headerlink&quot; title=&quot;Ce que j’ai retenu des outils à disposition&quot;&gt;&lt;/a&gt;Ce que j’ai retenu des outils à disposition&lt;/h1&gt;&lt;p&gt;On retrouve globalement les mêmes devtools que chrome (size / network / maps / …), ce qui peut faciliter le debuggage d’application et si l’on veut aller plus loin, et que l’on souhaite quand même debugguer sur son téléphone, Intel fournit une application qui vous permettra de tester votre application “non finalisée” sur votre appareil à condition d’installer l’application &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.intel.html5tools.apppreview&amp;amp;hl=fr_FR&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Intel App Preview&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Petit-bonus&quot;&gt;&lt;a href=&quot;#Petit-bonus&quot; class=&quot;headerlink&quot; title=&quot;Petit bonus&quot;&gt;&lt;/a&gt;Petit bonus&lt;/h1&gt;&lt;p&gt;Le XDK est aussi compatible avec les board IoT d’Intel. On peut donc programmer sur les cartes d’Intel orienté IoT avec le XDK&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2015-01-XDK/2boards.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;En-conclusion&quot;&gt;&lt;a href=&quot;#En-conclusion&quot; class=&quot;headerlink&quot; title=&quot;En conclusion&quot;&gt;&lt;/a&gt;En conclusion&lt;/h1&gt;&lt;p&gt;Intel XDK est à mon avis intéressant pour ceux qui veulent produire rapidement des applications cross plateformes (i.e. des gens qui débutent). Cependant, de mon point de vue de développeur, je ne suis pas sûr qu’une personne ayant déjà de bonnes compétences avec Cordova trouvent un intérêt avec le XDK. &lt;/p&gt;
&lt;h1 id=&quot;Pour-aller-plus-loin&quot;&gt;&lt;a href=&quot;#Pour-aller-plus-loin&quot; class=&quot;headerlink&quot; title=&quot;Pour aller plus loin&quot;&gt;&lt;/a&gt;Pour aller plus loin&lt;/h1&gt;&lt;p&gt;Le site officiel d’intel : &lt;a href=&quot;https://software.intel.com/fr-fr/html5/tools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://software.intel.com/fr-fr/html5/tools&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Les slides de la présentation donnée au GDG : &lt;/p&gt;
&lt;iframe src=&quot;//slides.com/r0ly/intel-xdk/embed&quot; width=&quot;576&quot; height=&quot;420&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;La vidéo de la session du GDG Nantes : &lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/pjcs-7Af5Y4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Soiree-GDG-Nantes-presentation-du-intel-XDK&quot;&gt;&lt;a href=&quot;#Soiree-GDG-Nantes-presentation-du-intel-XDK&quot; class=&quot;headerlink&quot; title=&quot;Soirée
    
    </summary>
    
      <category term="Event" scheme="http://jef.binomed.fr/categories/Event/"/>
    
    
      <category term="GDG Nantes" scheme="http://jef.binomed.fr/tags/GDG-Nantes/"/>
    
      <category term="XDK" scheme="http://jef.binomed.fr/tags/XDK/"/>
    
  </entry>
  
  <entry>
    <title>DevFest Nantes 2014 - Demos Part 1 - Myo</title>
    <link href="http://jef.binomed.fr/2014/12/16/2014-12-16--DevFest-Nantes-2014-Demos-Part-1-Myo/"/>
    <id>http://jef.binomed.fr/2014/12/16/2014-12-16--DevFest-Nantes-2014-Demos-Part-1-Myo/</id>
    <published>2014-12-16T14:24:40.000Z</published>
    <updated>2015-12-11T15:05:57.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Myo-et-EV3&quot;&gt;&lt;a href=&quot;#Myo-et-EV3&quot; class=&quot;headerlink&quot; title=&quot;Myo et EV3&quot;&gt;&lt;/a&gt;Myo et EV3&lt;/h1&gt;&lt;p&gt;Voici le résultat final&lt;/p&gt;
&lt;h2 id=&quot;Deplacement&quot;&gt;&lt;a href=&quot;#Deplacement&quot; class=&quot;headerlink&quot; title=&quot;Déplacement&quot;&gt;&lt;/a&gt;Déplacement&lt;/h2&gt;&lt;video width=&quot;80%&quot; controls&gt;&lt;br&gt;    &lt;source src=&quot;/assets/2014-12-DevFestDemos/videos/video_deplacement.mp4&quot; type=&quot;video/mp4&quot;&gt;&lt;br&gt;&lt;/video&gt;

&lt;h2 id=&quot;Tir-d’elastiques&quot;&gt;&lt;a href=&quot;#Tir-d’elastiques&quot; class=&quot;headerlink&quot; title=&quot;Tir d’élastiques&quot;&gt;&lt;/a&gt;Tir d’élastiques&lt;/h2&gt;&lt;video width=&quot;80%&quot; controls&gt;&lt;br&gt;    &lt;source src=&quot;/assets/2014-12-DevFestDemos/videos/video_tir.mp4&quot; type=&quot;video/mp4&quot;&gt;&lt;br&gt;&lt;/video&gt;

&lt;h2 id=&quot;Commandes&quot;&gt;&lt;a href=&quot;#Commandes&quot; class=&quot;headerlink&quot; title=&quot;Commandes&quot;&gt;&lt;/a&gt;Commandes&lt;/h2&gt;&lt;p&gt;Pour résumer, j’utilise mon bras pour diriger le robot et si je serre le poing, alors ce dernier tir des élastiques. &lt;/p&gt;
&lt;p&gt;Certains m’ont dit avec humour que ceci était la prochaine étape : &lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube-nocookie.com/embed/Z3aVhpKaHIU&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;mais …&lt;/p&gt;
&lt;h1 id=&quot;Je-ne-suis-pas-un-jedi-mais-juste-un-developpeur&quot;&gt;&lt;a href=&quot;#Je-ne-suis-pas-un-jedi-mais-juste-un-developpeur&quot; class=&quot;headerlink&quot; title=&quot;Je ne suis pas un jedi mais juste un développeur&quot;&gt;&lt;/a&gt;Je ne suis pas un jedi mais juste un développeur&lt;/h1&gt;&lt;p&gt;Voici donc le schéma de communication des différents composants : &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2014-12-DevFestDemos/images/schema_myo_ev3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Le fonctionnement est donc très simple. Un programme C++ tourne sur mon ordinateur récupérant tous les messages du Bracelet Myo via le SDK de Myo. Ce dernier envoie toutes les commandes à un serveur NodeJS qui s’occupe de communiquer en Bluetooth avec le Lego Mindstorm. &lt;/p&gt;
&lt;h2 id=&quot;Myo&quot;&gt;&lt;a href=&quot;#Myo&quot; class=&quot;headerlink&quot; title=&quot;Myo&quot;&gt;&lt;/a&gt;Myo&lt;/h2&gt;&lt;h3 id=&quot;C’est-quoi&quot;&gt;&lt;a href=&quot;#C’est-quoi&quot; class=&quot;headerlink&quot; title=&quot;C’est quoi ?&quot;&gt;&lt;/a&gt;C’est quoi ?&lt;/h3&gt;&lt;p&gt;Avant de parler de Myo, revenons un peu sur ce que c’est et comment cela fonctionne. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2014-12-DevFestDemos/images/myo-overview.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;C’est donc un bracelet connecté qui possède un certain nombre de sensors : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sensors Électriques&lt;/li&gt;
&lt;li&gt;Accéléromètre&lt;/li&gt;
&lt;li&gt;Gyroscope&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ce qui différencie le Myo des autres bracelets connectés, c’est les sensors électriques qui lui permettre de reconnaître des &lt;strong&gt;“gestes”&lt;/strong&gt;. De cette façon, en plus d’envoyer des informations de types : orientation / vitesse, nous sommes capable de détecter si le porteur du bracelet a fait un geste précis. Les gestes aujourd’hui reconnus sont : &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2014-12-DevFestDemos/images/myo_gestures.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;En fonction de la version du SDK, que vous avez un 5ème geste qui est disponible mais les gestes représentés ci-dessus sont ceux qui fonctionnent le mieux et qui sont les plus simple à déclencher.&lt;/p&gt;
&lt;h3 id=&quot;Que-dois-je-analyser&quot;&gt;&lt;a href=&quot;#Que-dois-je-analyser&quot; class=&quot;headerlink&quot; title=&quot;Que dois-je analyser ?&quot;&gt;&lt;/a&gt;Que dois-je analyser ?&lt;/h3&gt;&lt;p&gt;Avant d’attaquer le code, j’ai du me poser une question cruciale : &lt;strong&gt;Comment vais-je contrôler mon robot ?&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;Je viens de présenter les sensors qui sont à notre disposition : Accéléromètre, Gyroscope, Sensors électriques. Je dois donc choisir le moyen le plus simple pour contrôler le robot. &lt;/p&gt;
&lt;p&gt;Quel va être le mouvement le plus “naturel” pour contrôler un robot ? A défaut d’avoir trouvé le plus naturel, j’en ai trouvé un qui était simple à exploiter et simple à faire comprendre car c’est aussi un des enjeux majeurs de ce genre de devices : Si l’on doit passer un temps considérable à expliquer le fonctionnement, c’est que l’on a raté quelque chose ! &lt;/p&gt;
&lt;p&gt;Voici un schéma qui traduit le vocabulaire utilisé par &lt;a href=&quot;https://www.thalmic.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Thalmic&lt;/a&gt; (la société derrière le bracelet) pour retranscrire les informations du bracelet&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2014-12-DevFestDemos/images/Mark-blog-Diagrams-01.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Pour ma part, j’ai choisi d’exploiter le &lt;strong&gt;“Pitch”&lt;/strong&gt; et le &lt;strong&gt;“Yaw”&lt;/strong&gt;. Cela reste relativement intuitif et facile à expliquer : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Baissez votre bras et ça fera avancer le robot. Remontez-le et ça le fera reculer. Le bras à l’horizontal représente le point 0 (robot à l’arrêt).&lt;/li&gt;
&lt;li&gt;Bougez votre bras vers la gauche ou vers la droite pour le faire tourner.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;J’aurais pu utiliser le &lt;strong&gt;“Roll”&lt;/strong&gt; mais après quelques essais, je me suis rendu compte que le Roll était facile à faire pour l’utilisateur vers la partie extérieur de son corps mais pas vers l’intérieur… Cela avait le désavantage suivant : On peut facilement tourner dans un sens mais difficilement dans l’autre…. D’où mon choix de tourner avec le &lt;strong&gt;“Yaw”&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;Faites l’essai : Si vous êtes droitier, vous vous rendrez vite compte que tourner sa main vers la droite est simple, mais la tourner vers la gauche nécessite une certaine contorsion du bras qui rend le mouvement non naturel. De plus la combinaison Roll + Pitch complexifiait beaucoup le code.&lt;/p&gt;
&lt;h3 id=&quot;On-code-comment-avec&quot;&gt;&lt;a href=&quot;#On-code-comment-avec&quot; class=&quot;headerlink&quot; title=&quot;On code comment avec ?&quot;&gt;&lt;/a&gt;On code comment avec ?&lt;/h3&gt;&lt;p&gt;Aujourd’hui Thalmic a développé 3 SDKs permettant d’interagir avec des objets (programmation objets) que l’on peut manipuler :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un SDK en C++ exploitable pour les ordinateurs&lt;/li&gt;
&lt;li&gt;Un SDK en Java pour Android&lt;/li&gt;
&lt;li&gt;Un SDK en ObjectiveC pour Iphone&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A partir de là, on peut commencer à jouer. Je ne rentrerais pas trop dans le détail car je compte rédiger plus tard un billet sur le développement avec Myo. Je vais donc m’attarder sur la solution retenue pour la démo.&lt;/p&gt;
&lt;h3 id=&quot;Partie-C&quot;&gt;&lt;a href=&quot;#Partie-C&quot; class=&quot;headerlink&quot; title=&quot;Partie C++&quot;&gt;&lt;/a&gt;Partie C++&lt;/h3&gt;&lt;p&gt;Pour la démo, j’ai donc choisi d’exploiter le SDK C++ car utiliser mon téléphone présentait un soucis en termes de batterie notamment au niveau de la communication bluetooth classique avec le Lego.&lt;/p&gt;
&lt;p&gt;Je suis parti du code fournit avec le SDK pour exploiter les données que je voulais. Le principe du SDK est simple, nous posons un listener et nous récupérons des informations construites : &lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Class qui écoute les événements provenant du sdk&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; DataCollector : &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; myo::DeviceListener &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Appelé pour donner les données sur l&#39;orientation,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onOrientationData&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(myo::Myo* myo, uint64_t timestamp, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; myo::Quaternion&amp;lt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;&amp;gt;&amp;amp; quat)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;atan2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;asin&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;sqrt&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Calculate Euler angles (roll, pitch, and yaw) from the unit quaternion.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		roll = &lt;span class=&quot;built_in&quot;&gt;atan2&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2.0f&lt;/span&gt; * (quat.w() * quat.x() + quat.y() * quat.z()),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;2.0f&lt;/span&gt; * (quat.x() * quat.x() + quat.y() * quat.y()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pitch = &lt;span class=&quot;built_in&quot;&gt;asin&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2.0f&lt;/span&gt; * (quat.w() * quat.y() - quat.z() * quat.x()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		yaw = &lt;span class=&quot;built_in&quot;&gt;atan2&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2.0f&lt;/span&gt; * (quat.w() * quat.z() + quat.x() * quat.y()),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;2.0f&lt;/span&gt; * (quat.y() * quat.y() + quat.z() * quat.z()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Convert the floating point angles in radians to a scale from 0 to 20.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		roll_w = &lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;((roll + (&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;)M_PI) / (M_PI * &lt;span class=&quot;number&quot;&gt;2.0f&lt;/span&gt;) * &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pitch_w = &lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;((pitch + (&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;)M_PI / &lt;span class=&quot;number&quot;&gt;2.0f&lt;/span&gt;) / M_PI * &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		yaw_w = &lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;((yaw + (&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;)M_PI) / (M_PI * &lt;span class=&quot;number&quot;&gt;2.0f&lt;/span&gt;) * &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Appelé à chaque fois qu&#39;un geste est détecté&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onPose&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(myo::Myo* myo, uint64_t timestamp, myo::Pose pose)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		currentPose = pose;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Sur la pose Poing, on fait vibrer le bracelet&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pose == myo::Pose::fist) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			myo-&amp;gt;vibrate(myo::Myo::vibrationMedium);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Méthode appelée dans le main&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// On appelle notre serveur local avec un json formaté&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;?json=&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		url += toJson();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Request(GET, &lt;span class=&quot;string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;, url.c_str(), &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Méthode qui envoie nos données au format JSON&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		result += &lt;span class=&quot;string&quot;&gt;&quot;\&quot;roll\&quot;:&quot;&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::to_string(roll);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		result += &lt;span class=&quot;string&quot;&gt;&quot;,\&quot;pitch\&quot;:&quot;&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::to_string(pitch);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		result += &lt;span class=&quot;string&quot;&gt;&quot;,\&quot;yaw\&quot;:&quot;&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::to_string(yaw);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		result += &lt;span class=&quot;string&quot;&gt;&quot;,\&quot;pose\&quot;:\&quot;&quot;&lt;/span&gt; + currentPose.toString() + &lt;span class=&quot;string&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		result += &lt;span class=&quot;string&quot;&gt;&quot;&amp;#125;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;** argv)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// We catch any exceptions that might occur below -- see the catch statement for more details.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// On essaye de récupérer une instance de Myo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		myo::Hub hub;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// On patiente 10 secondes pour voir si on peut récupérer une instance de Myo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		myo::Myo* myo = hub.waitForMyo(&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Si hub.waitForMyo retourne null, alors c&#39;est qu&#39;on en a pas trouvé et donc on quitte notre programme&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!myo) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::runtime_error(&lt;span class=&quot;string&quot;&gt;&quot;Unable to find a Myo!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// On va construire notre listener &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		DataCollector collector;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Hub::addListener() Attache notre listener au hub Myo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		hub.addListener(&amp;amp;collector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// On rentre dans une boucle infinie afin de lire régulièrement les données&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// On récupère les informations 20 fois par secondes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			hub.run(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// On imprime les données collectées&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			collector.print();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::exception&amp;amp; e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cerr&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Error: &quot;&lt;/span&gt; &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cerr&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Press enter to continue.&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;.ignore();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Une fois ce code exécuté, nous récupérons 20 fois par seconde un JSON nous donnant l’état du bracelet. Et ce JSON est envoyé à un serveur tournant en local sur notre machine.&lt;/p&gt;
&lt;h2 id=&quot;Partie-NodeJS&quot;&gt;&lt;a href=&quot;#Partie-NodeJS&quot; class=&quot;headerlink&quot; title=&quot;Partie NodeJS&quot;&gt;&lt;/a&gt;Partie NodeJS&lt;/h2&gt;&lt;p&gt;La partie NodeJS est un peu plus compliquée car c’est elle qui possède l’intelligence du programme et l’aspect conversion. Le code est donc réparti en 3 composantes principales : &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;La partie Serveur : Dans cette partie, le programme reçoit les informations provenant du bracelet&lt;/li&gt;
&lt;li&gt;La partie Analyse : Dans cette partie, le programme décide quoi faire des données. Le robot doit-il avancer ? Reculer ? …&lt;/li&gt;
&lt;li&gt;La partie communication : Dans cette partie, le programme communique en bluetooth avec le Lego. Il y a donc un protocole à respecter et à implémenter.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Voici mon package.json &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;author&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;jefBinomed&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;MyoEV3&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;string&quot;&gt;&quot;bluetooth-serial-port&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;1.1.4&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// Utilisé pour la communication bluetooth&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;express&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;3.x&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// Utilisé pour la partie serveur&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Le-Serveur-NodeJS&quot;&gt;&lt;a href=&quot;#Le-Serveur-NodeJS&quot; class=&quot;headerlink&quot; title=&quot;Le Serveur NodeJS&quot;&gt;&lt;/a&gt;Le Serveur NodeJS&lt;/h3&gt;&lt;p&gt;Pour la partie serveur, je suis parti sur un simple serveur à base d’express. &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = express()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .use(express.static(&lt;span class=&quot;string&quot;&gt;&#39;public&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .use(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http.createServer(app).listen(&lt;span class=&quot;number&quot;&gt;8090&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;-------------------------------&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Start Http server on port : &#39;&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;8090&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;L’analyse-des-trames&quot;&gt;&lt;a href=&quot;#L’analyse-des-trames&quot; class=&quot;headerlink&quot; title=&quot;L’analyse des trames&quot;&gt;&lt;/a&gt;L’analyse des trames&lt;/h3&gt;&lt;p&gt;Plutôt que de rentrer dans le détail du code, je vais vous expliquer la démarche adoptée pour répondre au besoin. &lt;/p&gt;
&lt;p&gt;Le programme est bombardé de messages (20 / secondes) et donc nous devons les filtrer en entrée. Il est important de noter que tout geste détecté par le bracelet remplira le champ “pose” de mon json avec une valeur qui est différente de &lt;strong&gt;“rest”&lt;/strong&gt;. Nous devons donc traiter 2 cas : &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mon utilisateur a fait un geste et cela peut potentiellement signifier quelque chose à interpréter : pose != “rest”&lt;/li&gt;
&lt;li&gt;Mon utilisateur bouge son bras : pose === “rest”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Le cas 1 me permet de détecter plusieurs choses : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L’utilisateur veut effectuer un tir d’élastiques (pose === ‘fist’)&lt;/li&gt;
&lt;li&gt;L’utilisateur veut prendre la main sur le robot (enchaînement de gestes). Étant donné que le bracelet émet en continue des informations, il était primordial de définir une cinématique de départ ainsi qu’une cinématique de fin permettant d’indiquer au programme que l’on prend volontairement la main sur le robot. En effet, il serait désagréable de voir le robot se balader alors que l’on n’a pas décidé qu’on voulait le contrôler. De plus, afin d’éviter un déclenchement accidentel suite à un geste, j’ai pris le parti de demander la prise de contrôle suite à l’exécution de 3 gestes en moins de 2 secondes. Si l’utilisateur, exécute les gestes “waveOut” -&amp;gt; “waveIn” -&amp;gt; “FingerSpread”, il prend la main sur le robot.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Le cas 2 me permet de contrôler le déplacement du robot : &lt;/p&gt;
&lt;p&gt;Pour mettre en place cette partie, j’ai dû faire beaucoup d’essais et analyser précisément les métriques renvoyées par le Myo en fonction du positionnement de mon bras. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2014-12-DevFestDemos/images/Myo_gestes_metrics.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Le Pitch varie donc de -1.5 sur on lève le bras vers 1.5 si on baisse le bras.&lt;ul&gt;
&lt;li&gt;0.3 &amp;lt; Pitch &amp;lt; 1.5 =&amp;gt; On baisse le bras et donc on doit faire avancer le robot&lt;/li&gt;
&lt;li&gt;-0.3 &amp;lt; Pitch &amp;lt; 0.3 =&amp;gt; On est à l’horizontale et donc on doit arrêter le robot&lt;/li&gt;
&lt;li&gt;-1.5 &amp;lt; Pitch &amp;lt; -0.3 =&amp;gt; On lève le bras et donc on doit faire reculer le robot&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;La Yaw quand à lui varie sur 360° entre -3.13 et 3.13 (sachant que -3.13 va devenir 3.13 dans un sens et inversement). Les valeurs du Yaw dépendent de l’axe des points cardinaux. Cependant, ce qui m’intéresse, ce n’est pas tant une valeur entre -3.13 et 3.13 mais un delta par rapport à un point que je considérerais comme mon point 0. &lt;ul&gt;
&lt;li&gt;-0.3 &amp;lt; ΔYaw =&amp;gt; On dirige notre bras vers gauche et donc demande à notre robot d’aller à gauche&lt;/li&gt;
&lt;li&gt;-0.3 &amp;lt; ΔYaw &amp;lt; 0.3  =&amp;gt; Notre bras est au point 0 et donc demande à notre robot de s’arrêter&lt;/li&gt;
&lt;li&gt;0.3 &amp;lt; ΔYaw =&amp;gt; On dirige notre bras vers droite et donc demande à notre robot d’aller à droite&lt;/li&gt;
&lt;li&gt;La cinématique de prise de contrôle me sert donc à initialiser un point “zéro” pour le Yaw et toutes les données provenant après correspondront au delta de ce point de référence avec l’orientation de mon bras.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;L’envoi-des-donnees&quot;&gt;&lt;a href=&quot;#L’envoi-des-donnees&quot; class=&quot;headerlink&quot; title=&quot;L’envoi des données&quot;&gt;&lt;/a&gt;L’envoi des données&lt;/h3&gt;&lt;p&gt;La communication avec le Mindstorm s’est faite par bluetooth en suivant un système de messages : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“fire” : Demande au robot de tirer un élastique&lt;/li&gt;
&lt;li&gt;“start” : Demande au robot de joueur un son de démarrage (utilisé quand l’utilisateur prend le contrôle)&lt;/li&gt;
&lt;li&gt;“stop” : Demande au robot de s’arrêter &lt;/li&gt;
&lt;li&gt;“quit” : Demande au robot de jouer un son d’arrêt (utilisé quand l’utilisateur arrête de contrôler le robot)&lt;/li&gt;
&lt;li&gt;“down” : Demande au robot d’avancer&lt;/li&gt;
&lt;li&gt;“up” : Demande au robot de reculer&lt;/li&gt;
&lt;li&gt;“right” : Demande au robot d’aller à droite&lt;/li&gt;
&lt;li&gt;“left” : Demande au robot d’aller à gauche&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;L’envoie des données à du respecter un protocole bluetooth fixé par Lego : &lt;a href=&quot;http://www.mindstorms.rwth-aachen.de/trac/wiki/EV3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bluetooth Protocol for EV3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Un projet NodeJS existait pour la communication avec un EV3 mais ce dernier ne fonctionnait pas avec la version de Mindstorm que j’avais et son utilisation était trop compliquée. J’ai donc du tout recoder.&lt;/p&gt;
&lt;h2 id=&quot;Partie-EV3&quot;&gt;&lt;a href=&quot;#Partie-EV3&quot; class=&quot;headerlink&quot; title=&quot;Partie EV3&quot;&gt;&lt;/a&gt;Partie EV3&lt;/h2&gt;&lt;p&gt;Cette partie est relativement simple car je me suis contenté de recevoir les messages envoyés par le programme Node et en fonction du message, j’ai simplement  activé les bons moteurs.&lt;/p&gt;
&lt;p&gt;Pour ceux qui n’ont jamais vu à quoi ressemblait du code Mindstorm, mon code ressemble à quelque chose comme ça : &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2014-12-DevFestDemos/images/ev3_ide.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h1&gt;&lt;p&gt;Mon retour d’expérience sur cette démo est le suivant : Beaucoup de personnes on put essayer le bracelet pendant le devfest mais seulement un petit nombre ont réussi à faire fonctionner correctement la démo. Voici donc les points positifs et négatifs de ce retour : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(-) Le bracelet ne s’adapte clairement pas à tous les bras. Certaines femmes avaient par exemple un bras trop fin et les gestes ne pouvaient pas être reconnus&lt;/li&gt;
&lt;li&gt;(-) Les gestes que je considérais comme facile à faire ne l’étaient pas pour tous et même certains des gestes basiques n’arrivaient pas à être joué rendant impossible la prise de contrôle du robot. Le WaveOut était par exemple un geste impossible pour certains.&lt;/li&gt;
&lt;li&gt;(-) La prise de contrôle à partir de 3 gestes est trop longue. 3 gestes c’est trop ! J’aurais dû réduire cela à 2 gestes. Un grand nombre de personnes n’arrivaient pas à jouer correctement les 3 gestes et l’on perdait beaucoup de temps à configurer cela ! &lt;/li&gt;
&lt;li&gt;(+) Le fait d’avoir mis un log des gestes effectués dans une ligne de commande était après coup, une très bonne idée car cela m’a permis d’expliquer plus facilement aux personnes ce qu’elles devaient faire et cela me permettait aussi de vérifier avec eux les gestes effectués. &lt;/li&gt;
&lt;li&gt;(+) Le fait d’avoir mis en places des vibrations à des moments clés s’est révélé utile pour l’utilisateur car cela lui donne une impression plus forte de feedback.&lt;/li&gt;
&lt;li&gt;(+) Le fait d’avoir joué des sons sur le mindstorm pour signifier le démarrage du contrôle ou au contraire l’arrêt du contrôle s’est révélé aussi fort utile pour ce même feedback&lt;/li&gt;
&lt;li&gt;Si je devais rejouer cette démo, je réduirais donc la phase de contrôle et je mettrais en place une interface graphique affichant à l’utilisateur la donnée interprétée par le programme pour qu’il ait un feedback plus fort sur ce qu’il fait.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En conclusion, Myo est un outil     très utile et relativement facile à intégrer dans des solutions logicielles mais il faut complètement repenser la façon que l’on a de donner du feedback à l’utilisateur ! Dans le cadre de ma démo, une ihm aurait été un bon moyen de donner de l’information à l’utilisateur. L’utilisation de la vibration du bracelet est aussi importante car elle permet à l’utilisateur de comprendre que ce qu’il fait est interprété.&lt;/p&gt;
&lt;h1 id=&quot;Code-source&quot;&gt;&lt;a href=&quot;#Code-source&quot; class=&quot;headerlink&quot; title=&quot;Code source&quot;&gt;&lt;/a&gt;Code source&lt;/h1&gt;&lt;p&gt;Tout le code des 3 projets est disponible ici : &lt;a href=&quot;https://github.com/binomed/MyoEV3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MyoEV3&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Myo-et-EV3&quot;&gt;&lt;a href=&quot;#Myo-et-EV3&quot; class=&quot;headerlink&quot; title=&quot;Myo et EV3&quot;&gt;&lt;/a&gt;Myo et EV3&lt;/h1&gt;&lt;p&gt;Voici le résultat final&lt;/p&gt;
&lt;h2 id=&quot;De
    
    </summary>
    
      <category term="Event" scheme="http://jef.binomed.fr/categories/Event/"/>
    
    
      <category term="devfest" scheme="http://jef.binomed.fr/tags/devfest/"/>
    
      <category term="ev3" scheme="http://jef.binomed.fr/tags/ev3/"/>
    
      <category term="myo" scheme="http://jef.binomed.fr/tags/myo/"/>
    
      <category term="nodeJS" scheme="http://jef.binomed.fr/tags/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title>DevFest Nantes 2014 - Demos Part 0 - Teasing</title>
    <link href="http://jef.binomed.fr/2014/12/10/2014-12-10--DevFest-Nantes-2014-Demos-Part-0-Teasing/"/>
    <id>http://jef.binomed.fr/2014/12/10/2014-12-10--DevFest-Nantes-2014-Demos-Part-0-Teasing/</id>
    <published>2014-12-10T10:57:15.000Z</published>
    <updated>2015-12-11T15:05:57.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;DevFest-Nantes&quot;&gt;&lt;a href=&quot;#DevFest-Nantes&quot; class=&quot;headerlink&quot; title=&quot;DevFest Nantes ?&quot;&gt;&lt;/a&gt;DevFest Nantes ?&lt;/h1&gt;&lt;p&gt;Pour ceux qui ne le savent pas, je suis un des organisateurs du &lt;a href=&quot;http://devfest.gdgnantes.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DevFest Nantes&lt;/a&gt;.  C’est un événement organisé à Nantes dédié aux développeurs avec un fort focus autour des technologies Google. Cependant, cet événement offre aussi sa part de découvertes et en venant au DevFest Nantes, vous ne trouverez pas que des conférences autour de Google ! &lt;/p&gt;
&lt;p&gt;J’organise avec mes collègues du &lt;a href=&quot;http://gdgnantes.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GDG Nantes&lt;/a&gt; cet événement depuis maintenant 3 ans. Voici un petit retour sur les chiffres clés de ces dernières éditions pour mieux cerner l’événement : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://devfest2012.gdgnantes.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DevFest Nantes 2012&lt;/a&gt; : &lt;ul&gt;
&lt;li&gt;200 Participants&lt;/li&gt;
&lt;li&gt;18 Sessions&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLKGM_1tUdJi6X5VQpbIvckwEm7QVtD7K6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;12 vidéos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;18 Speakers issus de 5 pays différents&lt;/li&gt;
&lt;li&gt;6 Sponsors&lt;/li&gt;
&lt;li&gt;4 Organisateurs&lt;/li&gt;
&lt;li&gt;12 Bénévoles&lt;/li&gt;
&lt;li&gt;1 Lieu : Epitech Nantes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://devfest2013.gdgnantes.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DevFest Nantes 2013&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;300 Participants&lt;/li&gt;
&lt;li&gt;23 Sessions&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLKGM_1tUdJi63_dETfRmV2K_Q0bCXKT6K&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;22 vidéos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.flickr.com/photos/129650261@N07/sets/72157649087888720/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;321 Photos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;30 Speakers issus de 4 pays différents&lt;/li&gt;
&lt;li&gt;11 Sponsors&lt;/li&gt;
&lt;li&gt;5 Démos IT (Oculus, DataViz, Jeux, WebRTC,…)&lt;/li&gt;
&lt;li&gt;1 Super bon buffet&lt;/li&gt;
&lt;li&gt;5 Organisateurs&lt;/li&gt;
&lt;li&gt;17 Bénévoles&lt;/li&gt;
&lt;li&gt;1 Lieu : Epitech Nantes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://devfest2014.gdgnantes.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DevFest Nantes 2014&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;plus de 500 Participants ! &lt;/li&gt;
&lt;li&gt;28 Sessions&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLuZ_sYdawLiVbxgDCmrckrzJBcMfW_ycO&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;29 vidéos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.flickr.com/photos/129650261@N07/sets/72157649071974789/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;739 Photos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;31 Speakers issus de 6 pays différents&lt;/li&gt;
&lt;li&gt;18 Sponsors&lt;/li&gt;
&lt;li&gt;plus de 10 démos (Oculus, Glass, Myo, Arduino, Imprimante 3D, …)&lt;/li&gt;
&lt;li&gt;5 Organisateurs&lt;/li&gt;
&lt;li&gt;25 Bénévoles &lt;/li&gt;
&lt;li&gt;1 Lieu : La cité des congrès&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Demos&quot;&gt;&lt;a href=&quot;#Demos&quot; class=&quot;headerlink&quot; title=&quot;Démos&quot;&gt;&lt;/a&gt;Démos&lt;/h1&gt;&lt;p&gt;Si je parle de tout ça c’est pour m’attarder sur les démos que j’ai eu l’occasion de coder pour l’événement. En plus du site, j’ai eu la chance d’écrire les choses suivantes : &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Contrôle d’un robot &lt;a href=&quot;http://www.lego.com/en-us/mindstorms/?domainredir=mindstorms.lego.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lego Mindstorm&lt;/a&gt; par le bracelet connecté &lt;a href=&quot;thalmic.com&quot;&gt;Myo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Interface Gestuelle pour consulter le programme de l’événement avec la &lt;a href=&quot;https://www.leapmotion.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leap Motion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Quizz mobile en html pour s’amuser autrement&lt;/li&gt;
&lt;li&gt;Réalisation d’un jeu vidéo animé par les mouvements fait depuis un rameur d’appartement&lt;/li&gt;
&lt;li&gt;Mise en place d’un compte à rebours personnalisé pour le lancement de la keynote du DevFest&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Je vais donc traiter à travers mes prochains billets chacune de ces démos. Je reviendrai ainsi sur mes motivations et sur les enjeux techniques de ces démos.&lt;/p&gt;
&lt;h1 id=&quot;Avant-Gout&quot;&gt;&lt;a href=&quot;#Avant-Gout&quot; class=&quot;headerlink&quot; title=&quot;Avant-Gout&quot;&gt;&lt;/a&gt;Avant-Gout&lt;/h1&gt;&lt;p&gt;Voici un avant-gout de ce que j’ai pu faire lors de mes essais avec le Myo&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;video controls&gt;&lt;br&gt;    &lt;source src=&quot;/assets/2014-12-DevFestDemos/videos/demo_myo_arduino.mp4&quot; type=&quot;video/mp4&quot;&gt;&lt;br&gt;&lt;/video&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DevFest-Nantes&quot;&gt;&lt;a href=&quot;#DevFest-Nantes&quot; class=&quot;headerlink&quot; title=&quot;DevFest Nantes ?&quot;&gt;&lt;/a&gt;DevFest Nantes ?&lt;/h1&gt;&lt;p&gt;Pour ceux qui ne l
    
    </summary>
    
      <category term="Event" scheme="http://jef.binomed.fr/categories/Event/"/>
    
    
      <category term="arduino" scheme="http://jef.binomed.fr/tags/arduino/"/>
    
      <category term="devfest" scheme="http://jef.binomed.fr/tags/devfest/"/>
    
      <category term="ev3" scheme="http://jef.binomed.fr/tags/ev3/"/>
    
      <category term="leap motion" scheme="http://jef.binomed.fr/tags/leap-motion/"/>
    
      <category term="myo" scheme="http://jef.binomed.fr/tags/myo/"/>
    
      <category term="nodeJS" scheme="http://jef.binomed.fr/tags/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Un nouveau (?) blog</title>
    <link href="http://jef.binomed.fr/2014/11/29/2014-11-29--un-nouveau-blog/"/>
    <id>http://jef.binomed.fr/2014/11/29/2014-11-29--un-nouveau-blog/</id>
    <published>2014-11-29T14:14:06.000Z</published>
    <updated>2015-12-11T15:05:57.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Pourquoi&quot;&gt;&lt;a href=&quot;#Pourquoi&quot; class=&quot;headerlink&quot; title=&quot;Pourquoi ?&quot;&gt;&lt;/a&gt;Pourquoi ?&lt;/h2&gt;&lt;p&gt;Ca y est je me suis décidé à reblogguer si on peut dire ainsi.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.binomed.fr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.binomed.fr&lt;/a&gt; laisse donc sa place à &lt;a href=&quot;http://jef.binomed.fr&quot;&gt;http://jef.binomed.fr&lt;/a&gt; et ce pour traiter de nouveaux sujets. L’objectif de se blog est simple : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Partager mes dernières trouvailles en terme de code / technologies&lt;/li&gt;
&lt;li&gt;Faire des retours sur les événements où je serais allé soit en tant que speaker, soit en tant que participant&lt;/li&gt;
&lt;li&gt;Partagé tout ce que je jugerais utile :) Mais attention, je m’engage à ne pas vous partager ma vie ;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Le-moteur-de-blog-Hexo&quot;&gt;&lt;a href=&quot;#Le-moteur-de-blog-Hexo&quot; class=&quot;headerlink&quot; title=&quot;Le moteur de blog Hexo&quot;&gt;&lt;/a&gt;Le moteur de blog Hexo&lt;/h2&gt;&lt;h3 id=&quot;L’ancien-blog-sous-Octopress&quot;&gt;&lt;a href=&quot;#L’ancien-blog-sous-Octopress&quot; class=&quot;headerlink&quot; title=&quot;L’ancien blog sous Octopress&quot;&gt;&lt;/a&gt;L’ancien blog sous Octopress&lt;/h3&gt;&lt;p&gt;En voulant reprendre mon blog, je me suis retrouvé face à un problème de taille. Comment fonctionne &lt;a href=&quot;http://octopress.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Octopress&lt;/a&gt; déjà ? Il faut avouer aussi qu’en 2 ans, j’avais un peu perdu la configuration nécessaire et les prérequis en matière d’écriture de blog… &lt;/p&gt;
&lt;p&gt;J’ai donc essayé de réinstaller mon environnement de blog à savoir, Ruby, Rake, … et je me suis dit que c’était assez compliqué que si je voulais blogguer pendant mes missions chez des clients, il me fallait un environnement plus “work friendly”. En bon développeur, je me suis dit : &lt;strong&gt;Quel est le cahier des Charges ?&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;Cahier-des-Charges&quot;&gt;&lt;a href=&quot;#Cahier-des-Charges&quot; class=&quot;headerlink&quot; title=&quot;Cahier des Charges&quot;&gt;&lt;/a&gt;Cahier des Charges&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Je ne veux pas d’un site où j’aurais besoin d’un serveur php =&amp;gt; je veux un site statique genre githubpages&lt;/li&gt;
&lt;li&gt;Je veux un site que j’écrive en markdown car je ne suis pas un artiste, j’aime juste faire mon geek et je préfère me concentrer sur mon contenu plutôt que sur la forme.&lt;/li&gt;
&lt;li&gt;Je n’apporte pas particulièrement d’importance au fait que le site soit généré ou dynamique. Dans le cas d’un site généré, je pourrais toujours trouver une PIC (Plateforme d’Intégration Continue) qui me fasse le job&lt;/li&gt;
&lt;li&gt;Je veux pouvoir installer relativement simplement la solution si je change de pc et que ça soit simple quel que soit l’OS.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En partant de là, mon premier critère m’a amené à regarder du côté de Octopress / Jeckyll que j’avais déjà essayé mais je voulais essayer autre chose…. En discutant avec un collègue, j’ai découvert &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt; un générateur de sites statiques à la Octopress. Regardons de plus prêt les fonctionnalités qui ont fait de Hexo ma solution favorite : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Il est basé sur NodeJS =&amp;gt; facile à mettre en place même en mission chez un client&lt;/li&gt;
&lt;li&gt;Il est possible de déployer sur github =&amp;gt; J’ai ce que je voulais : pas de serveur PHP ! &lt;/li&gt;
&lt;li&gt;Il propose un système de plugins assez riches et les thèmes sont facilement customisable =&amp;gt; Je peux le faire évoluer comme je veux&lt;/li&gt;
&lt;li&gt;Le contenu est  écrit en markdown&lt;/li&gt;
&lt;li&gt;Il affiche des performances de génération de site bien meilleur à Octo &lt;strong&gt;&lt;a href=&quot;http://www.techelex.org/why-switch-blog-from-octopress-to-hexo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why I Switch My Blog From Octopress To Hexo&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Le seul point noir est que c’est un moteur très présent en asie et donc, un grand nombre de ressources / thèmes sont en Japonais ou Chinois…  Mais sinon, je m’y retrouve plutôt pas mal en terme de fonctionnalités.&lt;/p&gt;
&lt;h3 id=&quot;Installation&quot;&gt;&lt;a href=&quot;#Installation&quot; class=&quot;headerlink&quot; title=&quot;Installation&quot;&gt;&lt;/a&gt;Installation&lt;/h3&gt;&lt;p&gt;Pour l’installer et démarrer c’est simple : &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo init blog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; blog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Après, il ne vous reste plus qu’à configurer votre serveur github :) &lt;a href=&quot;http://hexo.io/docs/setup.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Configuration Hexo&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Pourquoi&quot;&gt;&lt;a href=&quot;#Pourquoi&quot; class=&quot;headerlink&quot; title=&quot;Pourquoi ?&quot;&gt;&lt;/a&gt;Pourquoi ?&lt;/h2&gt;&lt;p&gt;Ca y est je me suis décidé à reblogguer si
    
    </summary>
    
      <category term="News" scheme="http://jef.binomed.fr/categories/News/"/>
    
    
      <category term="hexo" scheme="http://jef.binomed.fr/tags/hexo/"/>
    
      <category term="nodeJS" scheme="http://jef.binomed.fr/tags/nodeJS/"/>
    
      <category term="octopress" scheme="http://jef.binomed.fr/tags/octopress/"/>
    
  </entry>
  
</feed>
